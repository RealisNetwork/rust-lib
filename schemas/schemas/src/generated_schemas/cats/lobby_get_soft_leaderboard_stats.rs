// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct CatsLobbyGetSoftLeaderboardStatsParams { # [serde (rename = "userId")] pub user_id : String } impl Schema for CatsLobbyGetSoftLeaderboardStatsParams { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"}},\"required\":[\"userId\"]}") } } impl Agent for CatsLobbyGetSoftLeaderboardStatsParams { fn topic () -> & 'static str { "cats_lobby_getSoftLeaderboardStats" } fn method () -> & 'static str { "lobby_getSoftLeaderboardStats" } fn agent () -> & 'static str { "cats" } } impl < 'de > Deserialize < 'de > for CatsLobbyGetSoftLeaderboardStatsReturns { fn deserialize < D > (_deserializer : D) -> Result < Self , D :: Error > where D : Deserializer < 'de > , { Ok (CatsLobbyGetSoftLeaderboardStatsReturns) } } # [derive (Debug , Clone , Serialize)] pub struct CatsLobbyGetSoftLeaderboardStatsReturns ; impl Schema for CatsLobbyGetSoftLeaderboardStatsReturns { fn schema () -> Value { serde_json :: json ! ("{}") } } impl Agent for CatsLobbyGetSoftLeaderboardStatsReturns { fn topic () -> & 'static str { "cats_lobby_getSoftLeaderboardStats" } fn method () -> & 'static str { "lobby_getSoftLeaderboardStats" } fn agent () -> & 'static str { "cats" } }