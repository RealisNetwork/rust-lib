// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct NearAdapterContractCallBurnNftParams { # [serde (rename = "nftId")] pub nft_id : String } impl Schema for NearAdapterContractCallBurnNftParams { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"nftId\":{\"type\":\"string\"}},\"required\":[\"nftId\"]}") } } impl Agent for NearAdapterContractCallBurnNftParams { fn topic () -> & 'static str { "near-adapter_contract_callBurnNft" } fn method () -> & 'static str { "contract_callBurnNft" } fn agent () -> & 'static str { "near-adapter" } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct NearAdapterContractCallBurnNftReturns { # [serde (rename = "balance")] pub balance : String } impl Schema for NearAdapterContractCallBurnNftReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"balance\":{\"type\":\"string\"}},\"required\":[\"balance\"]}") } } impl Agent for NearAdapterContractCallBurnNftReturns { fn topic () -> & 'static str { "near-adapter_contract_callBurnNft" } fn method () -> & 'static str { "contract_callBurnNft" } fn agent () -> & 'static str { "near-adapter" } }