// This file are autogenerated on build, everything you write here will be replaced

#![allow(unknown_lints)]
#![allow(clippy::all)]
use crate::generated_schemas::prelude::*;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct InventoryInventoryEndpointsGetByFilterParamsFiltersParamsParams {
    #[serde(rename = "value")]
    pub value: (),
    #[serde(rename = "column", deserialize_with = "deserialize_to_string")]
    pub column: String,
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct InventoryInventoryEndpointsGetByFilterParamsOrderByParams {
    #[serde(rename = "column", deserialize_with = "deserialize_to_string")]
    pub column: String,
    #[serde(rename = "desc")]
    pub desc: bool,
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct InventoryInventoryEndpointsGetByFilterParams {
    #[serde(rename = "page")]
    pub page: i32,
    #[serde(rename = "perPage")]
    pub per_page: i32,
    #[serde(rename = "category", deserialize_with = "deserialize_to_string")]
    pub category: String,
    #[serde(rename = "filters")]
    pub filters: Option<Vec<InventoryInventoryEndpointsGetByFilterParamsFiltersParamsParams>>,
    #[serde(rename = "orderBy")]
    pub order_by: Option<InventoryInventoryEndpointsGetByFilterParamsOrderByParams>,
}
impl Schema for InventoryInventoryEndpointsGetByFilterParams {
    fn schema() -> Value {
        serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"page\":{\"type\":\"integer\",\"minimum\":1,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"perPage\":{\"type\":\"integer\",\"minimum\":1,\"maximum\":100,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"category\":{\"type\":\"string\"},\"filters\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"value\":{},\"column\":{\"type\":\"string\"}},\"required\":[\"column\",\"value\"]}},\"orderBy\":{\"type\":\"object\",\"properties\":{\"column\":{\"type\":\"string\"},\"desc\":{\"type\":\"boolean\"}},\"required\":[\"column\",\"desc\"]}},\"required\":[\"category\",\"page\",\"perPage\"]}") . unwrap ()
    }
}
impl Agent for InventoryInventoryEndpointsGetByFilterParams {
    fn topic() -> &'static str {
        "inventory_inventoryEndpoints_getByFilter"
    }
    fn method() -> &'static str {
        "inventoryEndpoints_getByFilter"
    }
    fn agent() -> &'static str {
        "inventory"
    }
    fn access_level() -> AccessLevel {
        AccessLevel::Protected
    }
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct InventoryInventoryEndpointsGetByFilterReturnsItemsParamsParamsAdditionalParamsParams(
    pub Value,
);
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct InventoryInventoryEndpointsGetByFilterReturnsItemsParamsParams {
    #[serde(rename = "status", deserialize_with = "deserialize_to_string")]
    pub status: String,
    #[serde(rename = "createdAt")]
    pub created_at: i32,
    #[serde(rename = "updatedAt")]
    pub updated_at: i32,
    #[serde(rename = "type", deserialize_with = "deserialize_to_string")]
    pub r#type: String,
    #[serde(rename = "category", deserialize_with = "deserialize_to_string")]
    pub category: String,
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "image", deserialize_with = "deserialize_to_string")]
    pub image: String,
    #[serde(rename = "userId", deserialize_with = "deserialize_to_string")]
    pub user_id: String,
    #[serde(rename = "nickname", deserialize_with = "deserialize_to_string")]
    pub nickname: String,
    #[serde(rename = "subType", deserialize_with = "deserialize_to_string")]
    pub sub_type: String,
    #[serde(rename = "productId")]
    pub product_id: i32,
    #[serde(rename = "description", deserialize_with = "deserialize_to_string")]
    pub description: String,
    #[serde(rename = "additionalParams")]
    pub additional_params:
        InventoryInventoryEndpointsGetByFilterReturnsItemsParamsParamsAdditionalParamsParams,
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct InventoryInventoryEndpointsGetByFilterReturns {
    #[serde(rename = "items")]
    pub items: Vec<InventoryInventoryEndpointsGetByFilterReturnsItemsParamsParams>,
    #[serde(rename = "totalCount")]
    pub total_count: i32,
}
impl Schema for InventoryInventoryEndpointsGetByFilterReturns {
    fn schema() -> Value {
        serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"items\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"string\"},\"createdAt\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"updatedAt\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"type\":{\"type\":\"string\"},\"category\":{\"type\":\"string\"},\"id\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"image\":{\"type\":\"string\"},\"userId\":{\"type\":\"string\"},\"nickname\":{\"type\":\"string\"},\"subType\":{\"type\":\"string\"},\"productId\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"description\":{\"type\":\"string\"},\"additionalParams\":{\"type\":\"object\",\"properties\":{}}},\"required\":[\"id\",\"productId\",\"userId\",\"nickname\",\"type\",\"subType\",\"description\",\"image\",\"additionalParams\",\"status\",\"category\",\"createdAt\",\"updatedAt\"]}},\"totalCount\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}}},\"required\":[\"items\",\"totalCount\"]}")
    }
}
impl Agent for InventoryInventoryEndpointsGetByFilterReturns {
    fn topic() -> &'static str {
        "inventory_inventoryEndpoints_getByFilter"
    }
    fn method() -> &'static str {
        "inventoryEndpoints_getByFilter"
    }
    fn agent() -> &'static str {
        "inventory"
    }
    fn access_level() -> AccessLevel {
        AccessLevel::Protected
    }
}
