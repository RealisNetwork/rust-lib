// This file are autogenerated on build, everything you write here will be replaced

#![allow(unknown_lints)]
#![allow(clippy::all)]
use crate::Schema;
use serde::de::Deserializer;
use serde::{Deserialize, Serialize};
use serde_json::Value;
impl<'de> Deserialize<'de> for LobbyEquipmentEndpointsAddedItemNotificationParams {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        Ok(LobbyEquipmentEndpointsAddedItemNotificationParams)
    }
}
#[derive(Debug, Clone, Serialize)]
pub struct LobbyEquipmentEndpointsAddedItemNotificationParams;
impl Schema for LobbyEquipmentEndpointsAddedItemNotificationParams {
    fn schema() -> Value {
        todo!()
    }
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct LobbyEquipmentEndpointsAddedItemNotificationReturnsEffectsParamsParams {
    #[serde(rename = "statName")]
    pub stat_name: i8,
    #[serde(rename = "power")]
    pub power: String,
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct LobbyEquipmentEndpointsAddedItemNotificationReturns {
    #[serde(rename = "effects")]
    pub effects: Vec<LobbyEquipmentEndpointsAddedItemNotificationReturnsEffectsParamsParams>,
    #[serde(rename = "level")]
    pub level: i16,
    #[serde(rename = "maxLevel")]
    pub max_level: i16,
    #[serde(rename = "status")]
    pub status: i32,
    #[serde(rename = "linkToExplorer")]
    pub link_to_explorer: String,
    #[serde(rename = "bindingId")]
    pub binding_id: i32,
    #[serde(rename = "isPending")]
    pub is_pending: bool,
    #[serde(rename = "transactionHash")]
    pub transaction_hash: Option<String>,
    #[serde(rename = "equipmentItemId")]
    pub equipment_item_id: i32,
    #[serde(rename = "toNextLevelScrolls")]
    pub to_next_level_scrolls: i32,
    #[serde(rename = "blockId")]
    pub block_id: Option<String>,
}
