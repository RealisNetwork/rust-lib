// This file are autogenerated on build, everything you write here will be replaced

#![allow(unknown_lints)]
#![allow(clippy::all)]
use crate::generated_schemas::prelude::*;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct LobbyRegionsSetParams {
    #[serde(rename = "isFixed")]
    pub is_fixed: bool,
    #[serde(rename = "regionName", deserialize_with = "deserialize_to_string")]
    pub region_name: String,
}
impl Schema for LobbyRegionsSetParams {
    fn schema() -> Value {
        serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"isFixed\":{\"type\":\"boolean\"},\"regionName\":{\"type\":\"string\"}},\"required\":[\"regionName\",\"isFixed\"]}") . unwrap ()
    }
}
impl Agent for LobbyRegionsSetParams {
    fn topic() -> &'static str {
        "lobby_regions_set"
    }
    fn method() -> &'static str {
        "regions_set"
    }
    fn agent() -> &'static str {
        "lobby"
    }
    fn access_level() -> AccessLevel {
        AccessLevel::Protected
    }
}
impl<'de> Deserialize<'de> for LobbyRegionsSetReturns {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        serde_json::Value::deserialize(deserializer)?;
        Ok(LobbyRegionsSetReturns)
    }
}
#[derive(Debug, Clone, Serialize)]
pub struct LobbyRegionsSetReturns;
impl Schema for LobbyRegionsSetReturns {
    fn schema() -> Value {
        serde_json::json!("{}")
    }
}
impl Agent for LobbyRegionsSetReturns {
    fn topic() -> &'static str {
        "lobby_regions_set"
    }
    fn method() -> &'static str {
        "regions_set"
    }
    fn agent() -> &'static str {
        "lobby"
    }
    fn access_level() -> AccessLevel {
        AccessLevel::Protected
    }
}
