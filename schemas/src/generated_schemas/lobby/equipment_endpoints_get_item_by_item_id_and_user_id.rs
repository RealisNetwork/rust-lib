// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct LobbyEquipmentEndpointsGetItemByItemIdAndUserIdParams { # [serde (rename = "itemId")] pub item_id : i32 } impl Schema for LobbyEquipmentEndpointsGetItemByItemIdAndUserIdParams { fn schema () -> Value { serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"itemId\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}}},\"required\":[\"itemId\"]}") . unwrap () } } impl Agent for LobbyEquipmentEndpointsGetItemByItemIdAndUserIdParams { fn topic () -> & 'static str { "lobby_equipmentEndpoints_getItemByItemIdAndUserId" } fn method () -> & 'static str { "equipmentEndpoints_getItemByItemIdAndUserId" } fn agent () -> & 'static str { "lobby" } fn access_level () -> AccessLevel { } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct LobbyEquipmentEndpointsGetItemByItemIdAndUserIdReturnsAttributesParams { # [serde (rename = "vampirismPower")] pub vampirism_power : String , # [serde (rename = "strength")] pub strength : String , # [serde (rename = "agility")] pub agility : String , # [serde (rename = "health")] pub health : String , # [serde (rename = "ultPower")] pub ult_power : String , # [serde (rename = "healthRegenPercent")] pub health_regen_percent : String , # [serde (rename = "moveSpeed")] pub move_speed : String , # [serde (rename = "armor")] pub armor : String , # [serde (rename = "skillPower")] pub skill_power : String , # [serde (rename = "attackReloadSpeed")] pub attack_reload_speed : String , # [serde (rename = "intelligence")] pub intelligence : String , # [serde (rename = "attackDamage")] pub attack_damage : String , # [serde (rename = "skillEffectPower")] pub skill_effect_power : String , # [serde (rename = "ultEffectPower")] pub ult_effect_power : String } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct LobbyEquipmentEndpointsGetItemByItemIdAndUserIdReturnsMultipliersParams { # [serde (rename = "intelligence")] pub intelligence : String , # [serde (rename = "health")] pub health : String , # [serde (rename = "armor")] pub armor : String , # [serde (rename = "attackDamage")] pub attack_damage : String , # [serde (rename = "skillPower")] pub skill_power : String , # [serde (rename = "agility")] pub agility : String , # [serde (rename = "strength")] pub strength : String , # [serde (rename = "skillEffectPower")] pub skill_effect_power : String , # [serde (rename = "ultEffectPower")] pub ult_effect_power : String , # [serde (rename = "moveSpeed")] pub move_speed : String , # [serde (rename = "ultPower")] pub ult_power : String , # [serde (rename = "attackReloadSpeed")] pub attack_reload_speed : String , # [serde (rename = "vampirismPower")] pub vampirism_power : String , # [serde (rename = "healthRegenPercent")] pub health_regen_percent : String } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct LobbyEquipmentEndpointsGetItemByItemIdAndUserIdReturns { # [serde (rename = "type")] pub r#type : String , # [serde (rename = "userId")] pub user_id : String , # [serde (rename = "attributes")] pub attributes : LobbyEquipmentEndpointsGetItemByItemIdAndUserIdReturnsAttributesParams , # [serde (rename = "multipliers")] pub multipliers : LobbyEquipmentEndpointsGetItemByItemIdAndUserIdReturnsMultipliersParams , # [serde (rename = "itemId")] pub item_id : i32 , # [serde (rename = "slotId")] pub slot_id : i32 , # [serde (rename = "level")] pub level : i32 } impl Schema for LobbyEquipmentEndpointsGetItemByItemIdAndUserIdReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\"},\"userId\":{\"type\":\"string\"},\"attributes\":{\"type\":\"object\",\"properties\":{\"vampirismPower\":{\"type\":\"string\"},\"strength\":{\"type\":\"string\"},\"agility\":{\"type\":\"string\"},\"health\":{\"type\":\"string\"},\"ultPower\":{\"type\":\"string\"},\"healthRegenPercent\":{\"type\":\"string\"},\"moveSpeed\":{\"type\":\"string\"},\"armor\":{\"type\":\"string\"},\"skillPower\":{\"type\":\"string\"},\"attackReloadSpeed\":{\"type\":\"string\"},\"intelligence\":{\"type\":\"string\"},\"attackDamage\":{\"type\":\"string\"},\"skillEffectPower\":{\"type\":\"string\"},\"ultEffectPower\":{\"type\":\"string\"}},\"required\":[\"strength\",\"agility\",\"intelligence\",\"health\",\"healthRegenPercent\",\"armor\",\"moveSpeed\",\"attackDamage\",\"attackReloadSpeed\",\"skillPower\",\"skillEffectPower\",\"ultPower\",\"ultEffectPower\",\"vampirismPower\"]},\"multipliers\":{\"type\":\"object\",\"properties\":{\"intelligence\":{\"type\":\"string\"},\"health\":{\"type\":\"string\"},\"armor\":{\"type\":\"string\"},\"attackDamage\":{\"type\":\"string\"},\"skillPower\":{\"type\":\"string\"},\"agility\":{\"type\":\"string\"},\"strength\":{\"type\":\"string\"},\"skillEffectPower\":{\"type\":\"string\"},\"ultEffectPower\":{\"type\":\"string\"},\"moveSpeed\":{\"type\":\"string\"},\"ultPower\":{\"type\":\"string\"},\"attackReloadSpeed\":{\"type\":\"string\"},\"vampirismPower\":{\"type\":\"string\"},\"healthRegenPercent\":{\"type\":\"string\"}},\"required\":[\"strength\",\"agility\",\"intelligence\",\"health\",\"healthRegenPercent\",\"armor\",\"moveSpeed\",\"attackDamage\",\"attackReloadSpeed\",\"skillPower\",\"skillEffectPower\",\"ultPower\",\"ultEffectPower\",\"vampirismPower\"]},\"itemId\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"slotId\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"level\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}}},\"required\":[\"type\",\"slotId\",\"userId\",\"itemId\",\"level\",\"attributes\",\"multipliers\"]}") } } impl Agent for LobbyEquipmentEndpointsGetItemByItemIdAndUserIdReturns { fn topic () -> & 'static str { "lobby_equipmentEndpoints_getItemByItemIdAndUserId" } fn method () -> & 'static str { "equipmentEndpoints_getItemByItemIdAndUserId" } fn agent () -> & 'static str { "lobby" } fn access_level () -> AccessLevel { } }