// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogBlogGetByUrlParams { # [serde (rename = "url" , deserialize_with = "deserialize_to_string")] pub url : String } impl Schema for BlogBlogGetByUrlParams { fn schema () -> Value { serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"url\":{\"type\":\"string\"}},\"required\":[\"url\"]}") . unwrap () } } impl Agent for BlogBlogGetByUrlParams { fn topic () -> & 'static str { "blog_blog_getByUrl" } fn method () -> & 'static str { "blog_getByUrl" } fn agent () -> & 'static str { "blog" } fn access_level () -> AccessLevel { AccessLevel :: Public } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogBlogGetByUrlReturnsCategoryParams { # [serde (rename = "isAvailable")] pub is_available : bool , # [serde (rename = "id")] pub id : f64 , # [serde (rename = "name" , deserialize_with = "deserialize_to_string")] pub name : String } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogBlogGetByUrlReturns { # [serde (rename = "createdAt" , deserialize_with = "deserialize_to_string")] pub created_at : String , # [serde (rename = "lang" , deserialize_with = "deserialize_to_string")] pub lang : String , # [serde (rename = "isPinned")] pub is_pinned : bool , # [serde (rename = "updatedAt" , deserialize_with = "deserialize_to_string")] pub updated_at : String , # [serde (rename = "id")] pub id : f64 , # [serde (rename = "views")] pub views : f64 , # [serde (rename = "url" , deserialize_with = "deserialize_to_string")] pub url : String , # [serde (rename = "metaDescription" , deserialize_with = "deserialize_to_string")] pub meta_description : String , # [serde (rename = "title" , deserialize_with = "deserialize_to_string")] pub title : String , # [serde (rename = "content" , deserialize_with = "deserialize_to_string")] pub content : String , # [serde (rename = "category")] pub category : BlogBlogGetByUrlReturnsCategoryParams , # [serde (rename = "isAvailable")] pub is_available : bool , # [serde (rename = "metaTitle" , deserialize_with = "deserialize_to_string")] pub meta_title : String , # [serde (rename = "shortDescription" , deserialize_with = "deserialize_to_string")] pub short_description : String , # [serde (rename = "image" , deserialize_with = "deserialize_to_string")] pub image : String } impl Schema for BlogBlogGetByUrlReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"createdAt\":{\"type\":\"string\"},\"lang\":{\"type\":\"string\"},\"isPinned\":{\"type\":\"boolean\"},\"updatedAt\":{\"type\":\"string\"},\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"views\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"url\":{\"type\":\"string\"},\"metaDescription\":{\"type\":\"string\"},\"title\":{\"type\":\"string\"},\"content\":{\"type\":\"string\"},\"category\":{\"type\":\"object\",\"properties\":{\"isAvailable\":{\"type\":\"boolean\"},\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"name\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"isAvailable\"]},\"isAvailable\":{\"type\":\"boolean\"},\"metaTitle\":{\"type\":\"string\"},\"shortDescription\":{\"type\":\"string\"},\"image\":{\"type\":\"string\"}},\"required\":[\"id\",\"title\",\"metaTitle\",\"url\",\"image\",\"shortDescription\",\"metaDescription\",\"content\",\"isPinned\",\"views\",\"isAvailable\",\"lang\",\"createdAt\",\"updatedAt\",\"category\"]}") } } impl Agent for BlogBlogGetByUrlReturns { fn topic () -> & 'static str { "blog_blog_getByUrl" } fn method () -> & 'static str { "blog_getByUrl" } fn agent () -> & 'static str { "blog" } fn access_level () -> AccessLevel { AccessLevel :: Public } }