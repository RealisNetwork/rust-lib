// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogBlogGetParams { # [serde (rename = "id")] pub id : f64 } impl Schema for BlogBlogGetParams { fn schema () -> Value { serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}},\"required\":[\"id\"]}") . unwrap () } } impl Agent for BlogBlogGetParams { fn topic () -> & 'static str { "blog_blog_get" } fn method () -> & 'static str { "blog_get" } fn agent () -> & 'static str { "blog" } fn access_level () -> AccessLevel { AccessLevel :: Private } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogBlogGetReturnsCategoryParams { # [serde (rename = "id")] pub id : f64 , # [serde (rename = "isAvailable")] pub is_available : bool , # [serde (rename = "name" , deserialize_with = "deserialize_to_string")] pub name : String } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogBlogGetReturns { # [serde (rename = "isAvailable")] pub is_available : bool , # [serde (rename = "image" , deserialize_with = "deserialize_to_string")] pub image : String , # [serde (rename = "title" , deserialize_with = "deserialize_to_string")] pub title : String , # [serde (rename = "lang" , deserialize_with = "deserialize_to_string")] pub lang : String , # [serde (rename = "content" , deserialize_with = "deserialize_to_string")] pub content : String , # [serde (rename = "updatedAt" , deserialize_with = "deserialize_to_string")] pub updated_at : String , # [serde (rename = "isPinned")] pub is_pinned : bool , # [serde (rename = "createdAt" , deserialize_with = "deserialize_to_string")] pub created_at : String , # [serde (rename = "url" , deserialize_with = "deserialize_to_string")] pub url : String , # [serde (rename = "views")] pub views : f64 , # [serde (rename = "category")] pub category : BlogBlogGetReturnsCategoryParams , # [serde (rename = "shortDescription" , deserialize_with = "deserialize_to_string")] pub short_description : String , # [serde (rename = "metaDescription" , deserialize_with = "deserialize_to_string")] pub meta_description : String , # [serde (rename = "metaTitle" , deserialize_with = "deserialize_to_string")] pub meta_title : String , # [serde (rename = "id")] pub id : f64 } impl Schema for BlogBlogGetReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"isAvailable\":{\"type\":\"boolean\"},\"image\":{\"type\":\"string\"},\"title\":{\"type\":\"string\"},\"lang\":{\"type\":\"string\"},\"content\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"},\"isPinned\":{\"type\":\"boolean\"},\"createdAt\":{\"type\":\"string\"},\"url\":{\"type\":\"string\"},\"views\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"category\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"isAvailable\":{\"type\":\"boolean\"},\"name\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"isAvailable\"]},\"shortDescription\":{\"type\":\"string\"},\"metaDescription\":{\"type\":\"string\"},\"metaTitle\":{\"type\":\"string\"},\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}},\"required\":[\"id\",\"title\",\"metaTitle\",\"url\",\"image\",\"shortDescription\",\"metaDescription\",\"content\",\"isPinned\",\"views\",\"isAvailable\",\"lang\",\"createdAt\",\"updatedAt\",\"category\"]}") } } impl Agent for BlogBlogGetReturns { fn topic () -> & 'static str { "blog_blog_get" } fn method () -> & 'static str { "blog_get" } fn agent () -> & 'static str { "blog" } fn access_level () -> AccessLevel { AccessLevel :: Private } }