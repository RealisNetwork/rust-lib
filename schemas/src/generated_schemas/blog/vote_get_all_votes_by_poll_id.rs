// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogVoteGetAllVotesByPollIdParams { # [serde (rename = "id")] pub id : f64 } impl Schema for BlogVoteGetAllVotesByPollIdParams { fn schema () -> Value { serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}},\"required\":[\"id\"]}") . unwrap () } } impl Agent for BlogVoteGetAllVotesByPollIdParams { fn topic () -> & 'static str { "blog_vote_getAllVotesByPollId" } fn method () -> & 'static str { "vote_getAllVotesByPollId" } fn agent () -> & 'static str { "blog" } fn access_level () -> AccessLevel { AccessLevel :: Protected } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogVoteGetAllVotesByPollIdReturnsParams { # [serde (rename = "answer")] pub answer : f64 , # [serde (rename = "count")] pub count : f64 } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogVoteGetAllVotesByPollIdReturns (pub Vec < BlogVoteGetAllVotesByPollIdReturnsParams >) ; impl Schema for BlogVoteGetAllVotesByPollIdReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"answer\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"count\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}},\"required\":[\"answer\",\"count\"]}}") } } impl Agent for BlogVoteGetAllVotesByPollIdReturns { fn topic () -> & 'static str { "blog_vote_getAllVotesByPollId" } fn method () -> & 'static str { "vote_getAllVotesByPollId" } fn agent () -> & 'static str { "blog" } fn access_level () -> AccessLevel { AccessLevel :: Protected } }