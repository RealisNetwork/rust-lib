// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogPollUpdateParamsPropsParamsAnswersParamsParams { # [serde (rename = "answer")] pub answer : String , # [serde (rename = "isImage")] pub is_image : bool } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogPollUpdateParamsPropsParamsVotesParams { # [serde (rename = "id")] pub id : f64 , # [serde (rename = "userId")] pub user_id : String , # [serde (rename = "answer")] pub answer : f64 } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogPollUpdateParamsPropsParams { # [serde (rename = "endDate")] pub end_date : f64 , # [serde (rename = "answers")] pub answers : Vec < BlogPollUpdateParamsPropsParamsAnswersParamsParams > , # [serde (rename = "createdAt")] pub created_at : String , # [serde (rename = "updatedAt")] pub updated_at : String , # [serde (rename = "votes")] pub votes : BlogPollUpdateParamsPropsParamsVotesParams , # [serde (rename = "id")] pub id : f64 , # [serde (rename = "question")] pub question : String } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogPollUpdateParams { # [serde (rename = "props")] pub props : Option < BlogPollUpdateParamsPropsParams > , # [serde (rename = "id")] pub id : f64 } impl Schema for BlogPollUpdateParams { fn schema () -> Value { serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"props\":{\"type\":\"object\",\"properties\":{\"endDate\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"answers\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"answer\":{\"type\":\"string\"},\"isImage\":{\"type\":\"boolean\"}},\"required\":[\"isImage\",\"answer\"]}},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"},\"votes\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"userId\":{\"type\":\"string\"},\"answer\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}},\"required\":[\"id\",\"userId\",\"answer\"]},\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"question\":{\"type\":\"string\"}},\"required\":[\"id\",\"question\",\"answers\",\"endDate\",\"createdAt\",\"updatedAt\",\"votes\"]},\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}},\"required\":[\"id\"]}") . unwrap () } } impl Agent for BlogPollUpdateParams { fn topic () -> & 'static str { "blog_poll_update" } fn method () -> & 'static str { "poll_update" } fn agent () -> & 'static str { "blog" } fn access_level () -> AccessLevel { } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogPollUpdateReturns (pub bool) ; impl Schema for BlogPollUpdateReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"boolean\"}") } } impl Agent for BlogPollUpdateReturns { fn topic () -> & 'static str { "blog_poll_update" } fn method () -> & 'static str { "poll_update" } fn agent () -> & 'static str { "blog" } fn access_level () -> AccessLevel { } }