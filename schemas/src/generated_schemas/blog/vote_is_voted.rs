// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogVoteIsVotedParams { # [serde (rename = "pollId")] pub poll_id : f64 } impl Schema for BlogVoteIsVotedParams { fn schema () -> Value { serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"pollId\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}},\"required\":[\"pollId\"]}") . unwrap () } } impl Agent for BlogVoteIsVotedParams { fn topic () -> & 'static str { "blog_vote_isVoted" } fn method () -> & 'static str { "vote_isVoted" } fn agent () -> & 'static str { "blog" } fn access_level () -> AccessLevel { AccessLevel :: Protected } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogVoteIsVotedReturns (pub bool) ; impl Schema for BlogVoteIsVotedReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"boolean\"}") } } impl Agent for BlogVoteIsVotedReturns { fn topic () -> & 'static str { "blog_vote_isVoted" } fn method () -> & 'static str { "vote_isVoted" } fn agent () -> & 'static str { "blog" } fn access_level () -> AccessLevel { AccessLevel :: Protected } }