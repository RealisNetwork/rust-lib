// This file are autogenerated on build, everything you write here will be replaced

#![allow(unknown_lints)]
#![allow(clippy::all)]
use crate::generated_schemas::prelude::*;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BlogPollAddParamsAnswersParamsParams {
    #[serde(rename = "answer", deserialize_with = "deserialize_to_string")]
    pub answer: String,
    #[serde(rename = "isImage")]
    pub is_image: bool,
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BlogPollAddParams {
    #[serde(rename = "question", deserialize_with = "deserialize_to_string")]
    pub question: String,
    #[serde(rename = "answers")]
    pub answers: Vec<BlogPollAddParamsAnswersParamsParams>,
    #[serde(rename = "endDate", deserialize_with = "deserialize_to_string")]
    pub end_date: String,
}
impl Schema for BlogPollAddParams {
    fn schema() -> Value {
        serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"question\":{\"type\":\"string\"},\"answers\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"answer\":{\"type\":\"string\"},\"isImage\":{\"type\":\"boolean\"}},\"required\":[\"isImage\",\"answer\"]}},\"endDate\":{\"type\":\"string\"}},\"required\":[\"question\",\"answers\",\"endDate\"]}") . unwrap ()
    }
}
impl Agent for BlogPollAddParams {
    fn topic() -> &'static str {
        "blog_poll_add"
    }
    fn method() -> &'static str {
        "poll_add"
    }
    fn agent() -> &'static str {
        "blog"
    }
    fn access_level() -> AccessLevel {
        AccessLevel::Private
    }
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BlogPollAddReturns(pub bool);
impl Schema for BlogPollAddReturns {
    fn schema() -> Value {
        serde_json::json!("{\"type\":\"boolean\"}")
    }
}
impl Agent for BlogPollAddReturns {
    fn topic() -> &'static str {
        "blog_poll_add"
    }
    fn method() -> &'static str {
        "poll_add"
    }
    fn agent() -> &'static str {
        "blog"
    }
    fn access_level() -> AccessLevel {
        AccessLevel::Private
    }
}
