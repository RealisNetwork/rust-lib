// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogBlogGetAllParams { # [serde (rename = "page")] pub page : f64 , # [serde (rename = "perPage")] pub per_page : f64 } impl Schema for BlogBlogGetAllParams { fn schema () -> Value { serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"page\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"perPage\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}},\"required\":[\"page\",\"perPage\"]}") . unwrap () } } impl Agent for BlogBlogGetAllParams { fn topic () -> & 'static str { "blog_blog_getAll" } fn method () -> & 'static str { "blog_getAll" } fn agent () -> & 'static str { "blog" } fn access_level () -> AccessLevel { AccessLevel :: Private } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogBlogGetAllReturnsDataParamsParams { # [serde (rename = "views")] pub views : f64 , # [serde (rename = "title" , deserialize_with = "deserialize_to_string")] pub title : String , # [serde (rename = "id")] pub id : f64 , # [serde (rename = "url" , deserialize_with = "deserialize_to_string")] pub url : String , # [serde (rename = "isPinned")] pub is_pinned : bool } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct BlogBlogGetAllReturns { # [serde (rename = "totalCount")] pub total_count : f64 , # [serde (rename = "data")] pub data : Vec < BlogBlogGetAllReturnsDataParamsParams > } impl Schema for BlogBlogGetAllReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"totalCount\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"views\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"title\":{\"type\":\"string\"},\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"url\":{\"type\":\"string\"},\"isPinned\":{\"type\":\"boolean\"}},\"required\":[\"id\",\"url\",\"title\",\"isPinned\",\"views\"]}}},\"required\":[\"totalCount\",\"data\"]}") } } impl Agent for BlogBlogGetAllReturns { fn topic () -> & 'static str { "blog_blog_getAll" } fn method () -> & 'static str { "blog_getAll" } fn agent () -> & 'static str { "blog" } fn access_level () -> AccessLevel { AccessLevel :: Private } }