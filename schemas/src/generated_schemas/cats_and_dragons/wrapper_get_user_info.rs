// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct CatsAndDragonsWrapperGetUserInfoParams { # [serde (rename = "userId" , deserialize_with = "deserialize_to_string")] pub user_id : String , # [serde (rename = "appId")] pub app_id : f64 } impl Schema for CatsAndDragonsWrapperGetUserInfoParams { fn schema () -> Value { serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"},\"appId\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}},\"required\":[\"userId\",\"appId\"]}") . unwrap () } } impl Agent for CatsAndDragonsWrapperGetUserInfoParams { fn topic () -> & 'static str { "catsAndDragons_wrapper_getUserInfo" } fn method () -> & 'static str { "wrapper_getUserInfo" } fn agent () -> & 'static str { "catsAndDragons" } fn access_level () -> AccessLevel { AccessLevel :: Public } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct CatsAndDragonsWrapperGetUserInfoReturns { # [serde (rename = "hasReferrer")] pub has_referrer : bool , # [serde (rename = "isNewProfile")] pub is_new_profile : bool , # [serde (rename = "refCode" , deserialize_with = "deserialize_to_string")] pub ref_code : String , # [serde (rename = "refLink" , deserialize_with = "deserialize_to_string")] pub ref_link : String , # [serde (rename = "email" , deserialize_with = "deserialize_to_string")] pub email : String , # [serde (rename = "isAuthorized")] pub is_authorized : bool , # [serde (rename = "provider" , deserialize_with = "deserialize_to_string")] pub provider : String , # [serde (rename = "nickname" , deserialize_with = "deserialize_to_string")] pub nickname : String } impl Schema for CatsAndDragonsWrapperGetUserInfoReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"hasReferrer\":{\"type\":\"boolean\"},\"isNewProfile\":{\"type\":\"boolean\"},\"refCode\":{\"type\":\"string\"},\"refLink\":{\"type\":\"string\"},\"email\":{\"type\":\"string\"},\"isAuthorized\":{\"type\":\"boolean\"},\"provider\":{\"type\":\"string\",\"pattern\":\"^(Keycloak)|(DeviceId)$\"},\"nickname\":{\"type\":\"string\"}},\"required\":[\"email\",\"isAuthorized\",\"refLink\",\"refCode\",\"hasReferrer\",\"nickname\",\"isNewProfile\",\"provider\"]}") } } impl Agent for CatsAndDragonsWrapperGetUserInfoReturns { fn topic () -> & 'static str { "catsAndDragons_wrapper_getUserInfo" } fn method () -> & 'static str { "wrapper_getUserInfo" } fn agent () -> & 'static str { "catsAndDragons" } fn access_level () -> AccessLevel { AccessLevel :: Public } }