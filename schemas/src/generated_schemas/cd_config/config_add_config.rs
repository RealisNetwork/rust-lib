// This file are autogenerated on build, everything you write here will be replaced

#![allow(unknown_lints)]
#![allow(clippy::all)]
use crate::generated_schemas::prelude::*;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CdConfigConfigAddConfigParamsDataParams(Value);
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CdConfigConfigAddConfigParams {
    #[serde(rename = "key")]
    pub key: String,
    #[serde(rename = "data")]
    pub data: CdConfigConfigAddConfigParamsDataParams,
}
impl Schema for CdConfigConfigAddConfigParams {
    fn schema() -> Value {
        serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"key\":{\"type\":\"string\"},\"data\":{\"type\":\"object\",\"properties\":{}}},\"required\":[\"key\",\"data\"]}") . unwrap ()
    }
}
impl Agent for CdConfigConfigAddConfigParams {
    fn topic() -> &'static str {
        "cd-config_config_addConfig"
    }
    fn method() -> &'static str {
        "config_addConfig"
    }
    fn agent() -> &'static str {
        "cd-config"
    }
    fn access_level() -> AccessLevel {
        AccessLevel::Public
    }
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CdConfigConfigAddConfigReturns(pub bool);
impl Schema for CdConfigConfigAddConfigReturns {
    fn schema() -> Value {
        serde_json::json!("{\"type\":\"boolean\"}")
    }
}
impl Agent for CdConfigConfigAddConfigReturns {
    fn topic() -> &'static str {
        "cd-config_config_addConfig"
    }
    fn method() -> &'static str {
        "config_addConfig"
    }
    fn agent() -> &'static str {
        "cd-config"
    }
    fn access_level() -> AccessLevel {
        AccessLevel::Public
    }
}
