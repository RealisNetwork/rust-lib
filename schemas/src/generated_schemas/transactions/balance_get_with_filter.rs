// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct TransactionsBalanceGetWithFilterParamsFilterListParams { # [serde (rename = "firstDate")] pub first_date : Option < String > , # [serde (rename = "reason")] pub reason : Option < String > , # [serde (rename = "TypeTransaction")] pub type_transaction : Option < String > , # [serde (rename = "userId")] pub user_id : Option < String > , # [serde (rename = "page")] pub page : Option < f64 > , # [serde (rename = "perPage")] pub per_page : Option < f64 > , # [serde (rename = "creator")] pub creator : Option < String > , # [serde (rename = "lastDate")] pub last_date : Option < String > } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct TransactionsBalanceGetWithFilterParams { # [serde (rename = "filterList")] pub filter_list : TransactionsBalanceGetWithFilterParamsFilterListParams } impl Schema for TransactionsBalanceGetWithFilterParams { fn schema () -> Value { serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"filterList\":{\"type\":\"object\",\"properties\":{\"firstDate\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"TypeTransaction\":{\"type\":\"string\"},\"userId\":{\"type\":\"string\"},\"page\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"perPage\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"creator\":{\"type\":\"string\"},\"lastDate\":{\"type\":\"string\"}}}},\"required\":[\"filterList\"]}") . unwrap () } } impl Agent for TransactionsBalanceGetWithFilterParams { fn topic () -> & 'static str { "transactions_balance_getWithFilter" } fn method () -> & 'static str { "balance_getWithFilter" } fn agent () -> & 'static str { "transactions" } fn access_level () -> AccessLevel { AccessLevel :: Protected } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct TransactionsBalanceGetWithFilterReturnsDataParamsParamsExtraDetailParams { } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct TransactionsBalanceGetWithFilterReturnsDataParamsParams { # [serde (rename = "createdAt" , deserialize_with = "deserialize_to_string")] pub created_at : String , # [serde (rename = "creator" , deserialize_with = "deserialize_to_string")] pub creator : String , # [serde (rename = "id")] pub id : i32 , # [serde (rename = "txId" , deserialize_with = "deserialize_to_string")] pub tx_id : String , # [serde (rename = "currency" , deserialize_with = "deserialize_to_string")] pub currency : String , # [serde (rename = "userId" , deserialize_with = "deserialize_to_string")] pub user_id : String , # [serde (rename = "extraDetail")] pub extra_detail : Option < TransactionsBalanceGetWithFilterReturnsDataParamsParamsExtraDetailParams > , # [serde (rename = "updatedAt" , deserialize_with = "deserialize_to_string")] pub updated_at : String , # [serde (rename = "debit" , deserialize_with = "deserialize_to_string")] pub debit : String , # [serde (rename = "credit" , deserialize_with = "deserialize_to_string")] pub credit : String , # [serde (rename = "reason" , deserialize_with = "deserialize_to_string")] pub reason : String } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct TransactionsBalanceGetWithFilterReturns { # [serde (rename = "totalCount")] pub total_count : i32 , # [serde (rename = "data")] pub data : Vec < TransactionsBalanceGetWithFilterReturnsDataParamsParams > } impl Schema for TransactionsBalanceGetWithFilterReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"totalCount\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"createdAt\":{\"type\":\"string\"},\"creator\":{\"type\":\"string\"},\"id\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"txId\":{\"type\":\"string\"},\"currency\":{\"type\":\"string\",\"pattern\":\"^(ETH)|(LIS)|(WLIS)|(TLIS)$\"},\"userId\":{\"type\":\"string\"},\"extraDetail\":{\"type\":\"object\",\"properties\":{}},\"updatedAt\":{\"type\":\"string\"},\"debit\":{\"type\":\"string\"},\"credit\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"}},\"required\":[\"id\",\"debit\",\"credit\",\"reason\",\"currency\",\"txId\",\"userId\",\"creator\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"totalCount\",\"data\"]}") } } impl Agent for TransactionsBalanceGetWithFilterReturns { fn topic () -> & 'static str { "transactions_balance_getWithFilter" } fn method () -> & 'static str { "balance_getWithFilter" } fn agent () -> & 'static str { "transactions" } fn access_level () -> AccessLevel { AccessLevel :: Protected } }