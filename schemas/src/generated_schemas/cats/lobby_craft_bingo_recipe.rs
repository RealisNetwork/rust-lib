// This file are autogenerated on build, everything you write here will be replaced

#![allow(unknown_lints)]
#![allow(clippy::all)]
use crate::generated_schemas::prelude::*;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CatsLobbyCraftBingoRecipeParams {
    #[serde(rename = "userId")]
    pub user_id: String,
    #[serde(rename = "recipeId")]
    pub recipe_id: i64,
}
impl Schema for CatsLobbyCraftBingoRecipeParams {
    fn schema() -> Value {
        serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"},\"recipeId\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}},\"required\":[\"userId\",\"recipeId\"]}")
    }
}
impl Agent for CatsLobbyCraftBingoRecipeParams {
    fn topic() -> &'static str {
        "cats_lobby_craftBingoRecipe"
    }
    fn method() -> &'static str {
        "lobby_craftBingoRecipe"
    }
    fn agent() -> &'static str {
        "cats"
    }
}
impl<'de> Deserialize<'de> for CatsLobbyCraftBingoRecipeReturns {
    fn deserialize<D>(_deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        Ok(CatsLobbyCraftBingoRecipeReturns)
    }
}
#[derive(Debug, Clone, Serialize)]
pub struct CatsLobbyCraftBingoRecipeReturns;
impl Schema for CatsLobbyCraftBingoRecipeReturns {
    fn schema() -> Value {
        serde_json::json!("{}")
    }
}
impl Agent for CatsLobbyCraftBingoRecipeReturns {
    fn topic() -> &'static str {
        "cats_lobby_craftBingoRecipe"
    }
    fn method() -> &'static str {
        "lobby_craftBingoRecipe"
    }
    fn agent() -> &'static str {
        "cats"
    }
}
