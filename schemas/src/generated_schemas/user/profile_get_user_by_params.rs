// This file are autogenerated on build, everything you write here will be replaced

#![allow(unknown_lints)]
#![allow(clippy::all)]
use crate::generated_schemas::prelude::*;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct UserProfileGetUserByParamsParams {
    #[serde(rename = "ethWallet")]
    pub eth_wallet: String,
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "lisWallet")]
    pub lis_wallet: String,
    #[serde(rename = "supportId")]
    pub support_id: String,
    #[serde(rename = "GPA")]
    pub gpa: String,
    #[serde(rename = "nickname")]
    pub nickname: String,
}
impl Schema for UserProfileGetUserByParamsParams {
    fn schema() -> Value {
        serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"ethWallet\":{\"type\":\"string\"},\"email\":{\"type\":\"string\"},\"lisWallet\":{\"type\":\"string\"},\"supportId\":{\"type\":\"string\"},\"GPA\":{\"type\":\"string\"},\"nickname\":{\"type\":\"string\"}},\"required\":null}")
    }
}
impl Agent for UserProfileGetUserByParamsParams {
    fn topic() -> &'static str {
        "user_profile_getUserByParams"
    }
    fn method() -> &'static str {
        "profile_getUserByParams"
    }
    fn agent() -> &'static str {
        "user"
    }
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct UserProfileGetUserByParamsReturnsBanParams {
    #[serde(rename = "createdAt")]
    pub created_at: i64,
    #[serde(rename = "updatedAt")]
    pub updated_at: i64,
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "reason")]
    pub reason: String,
    #[serde(rename = "whoBanned")]
    pub who_banned: String,
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct UserProfileGetUserByParamsReturns {
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "userId")]
    pub user_id: String,
    #[serde(rename = "isNicknameChanged")]
    pub is_nickname_changed: bool,
    #[serde(rename = "notice")]
    pub notice: String,
    #[serde(rename = "isBanned")]
    pub is_banned: bool,
    #[serde(rename = "isSubscribedToMailing")]
    pub is_subscribed_to_mailing: bool,
    #[serde(rename = "isDeleted")]
    pub is_deleted: bool,
    #[serde(rename = "ban")]
    pub ban: UserProfileGetUserByParamsReturnsBanParams,
    #[serde(rename = "isConfirmed")]
    pub is_confirmed: bool,
    #[serde(rename = "verified")]
    pub verified: bool,
    #[serde(rename = "suspicious")]
    pub suspicious: bool,
    #[serde(rename = "registeredAt")]
    pub registered_at: i64,
    #[serde(rename = "nickname")]
    pub nickname: String,
    #[serde(rename = "email")]
    pub email: String,
}
impl Schema for UserProfileGetUserByParamsReturns {
    fn schema() -> Value {
        serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"userId\":{\"type\":\"string\"},\"isNicknameChanged\":{\"type\":\"boolean\"},\"notice\":{\"type\":\"string\"},\"isBanned\":{\"type\":\"boolean\"},\"isSubscribedToMailing\":{\"type\":\"boolean\"},\"isDeleted\":{\"type\":\"boolean\"},\"ban\":{\"type\":\"object\",\"properties\":{\"createdAt\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"updatedAt\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"reason\":{\"type\":\"string\"},\"whoBanned\":{\"type\":\"string\"}},\"required\":[\"id\",\"reason\",\"whoBanned\",\"createdAt\",\"updatedAt\"]},\"isConfirmed\":{\"type\":\"boolean\"},\"verified\":{\"type\":\"boolean\"},\"suspicious\":{\"type\":\"boolean\"},\"registeredAt\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"nickname\":{\"type\":\"string\"},\"email\":{\"type\":\"string\"}},\"required\":[\"id\",\"userId\",\"nickname\",\"email\",\"verified\",\"isNicknameChanged\",\"isSubscribedToMailing\",\"suspicious\",\"isConfirmed\",\"notice\",\"isBanned\",\"isDeleted\",\"ban\",\"registeredAt\"]}")
    }
}
impl Agent for UserProfileGetUserByParamsReturns {
    fn topic() -> &'static str {
        "user_profile_getUserByParams"
    }
    fn method() -> &'static str {
        "profile_getUserByParams"
    }
    fn agent() -> &'static str {
        "user"
    }
}
