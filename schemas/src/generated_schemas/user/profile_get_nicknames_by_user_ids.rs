// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct UserProfileGetNicknamesByUserIdsParams { # [serde (rename = "userIds")] pub user_ids : Vec < String > } impl Schema for UserProfileGetNicknamesByUserIdsParams { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"userIds\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"userIds\"]}") } } impl Agent for UserProfileGetNicknamesByUserIdsParams { fn topic () -> & 'static str { "user_profile_getNicknamesByUserIds" } fn method () -> & 'static str { "profile_getNicknamesByUserIds" } fn agent () -> & 'static str { "user" } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct UserProfileGetNicknamesByUserIdsReturns (pub Vec < String >) ; impl Schema for UserProfileGetNicknamesByUserIdsReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"array\",\"items\":{\"type\":\"string\"}}") } } impl Agent for UserProfileGetNicknamesByUserIdsReturns { fn topic () -> & 'static str { "user_profile_getNicknamesByUserIds" } fn method () -> & 'static str { "profile_getNicknamesByUserIds" } fn agent () -> & 'static str { "user" } }