// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct UserProfileGetProfileParams { # [serde (rename = "userId" , deserialize_with = "deserialize_to_string")] pub user_id : String } impl Schema for UserProfileGetProfileParams { fn schema () -> Value { serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"}},\"required\":[\"userId\"]}") . unwrap () } } impl Agent for UserProfileGetProfileParams { fn topic () -> & 'static str { "user_profile_getProfile" } fn method () -> & 'static str { "profile_getProfile" } fn agent () -> & 'static str { "user" } fn access_level () -> AccessLevel { AccessLevel :: Private } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct UserProfileGetProfileReturnsBanParams { # [serde (rename = "whoBanned" , deserialize_with = "deserialize_to_string")] pub who_banned : String , # [serde (rename = "id")] pub id : f64 , # [serde (rename = "reason" , deserialize_with = "deserialize_to_string")] pub reason : String , # [serde (rename = "createdAt" , deserialize_with = "deserialize_to_string")] pub created_at : String , # [serde (rename = "updatedAt" , deserialize_with = "deserialize_to_string")] pub updated_at : String , # [serde (rename = "bannedUntil" , deserialize_with = "deserialize_to_string")] pub banned_until : String } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct UserProfileGetProfileReturns { # [serde (rename = "id")] pub id : f64 , # [serde (rename = "lifeTimeInterestPercent" , deserialize_with = "deserialize_to_string")] pub life_time_interest_percent : String , # [serde (rename = "lastActivity" , deserialize_with = "deserialize_to_string")] pub last_activity : String , # [serde (rename = "isSubscribedToMailing")] pub is_subscribed_to_mailing : bool , # [serde (rename = "isConfirmed")] pub is_confirmed : bool , # [serde (rename = "hasPassword")] pub has_password : bool , # [serde (rename = "verified")] pub verified : bool , # [serde (rename = "userId" , deserialize_with = "deserialize_to_string")] pub user_id : String , # [serde (rename = "isBanned")] pub is_banned : bool , # [serde (rename = "isNicknameChanged")] pub is_nickname_changed : bool , # [serde (rename = "suspicious")] pub suspicious : bool , # [serde (rename = "isDeleted")] pub is_deleted : bool , # [serde (rename = "email" , deserialize_with = "deserialize_to_string")] pub email : String , # [serde (rename = "lifeTimeInterest")] pub life_time_interest : bool , # [serde (rename = "ban")] pub ban : UserProfileGetProfileReturnsBanParams , # [serde (rename = "notice" , deserialize_with = "deserialize_to_string")] pub notice : String , # [serde (rename = "registeredAt" , deserialize_with = "deserialize_to_string")] pub registered_at : String , # [serde (rename = "nickname" , deserialize_with = "deserialize_to_string")] pub nickname : String } impl Schema for UserProfileGetProfileReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"lifeTimeInterestPercent\":{\"type\":\"string\"},\"lastActivity\":{\"type\":\"string\"},\"isSubscribedToMailing\":{\"type\":\"boolean\"},\"isConfirmed\":{\"type\":\"boolean\"},\"hasPassword\":{\"type\":\"boolean\"},\"verified\":{\"type\":\"boolean\"},\"userId\":{\"type\":\"string\"},\"isBanned\":{\"type\":\"boolean\"},\"isNicknameChanged\":{\"type\":\"boolean\"},\"suspicious\":{\"type\":\"boolean\"},\"isDeleted\":{\"type\":\"boolean\"},\"email\":{\"type\":\"string\"},\"lifeTimeInterest\":{\"type\":\"boolean\"},\"ban\":{\"type\":\"object\",\"properties\":{\"whoBanned\":{\"type\":\"string\"},\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"reason\":{\"type\":\"string\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"},\"bannedUntil\":{\"type\":\"string\"}},\"required\":[\"id\",\"reason\",\"whoBanned\",\"createdAt\",\"updatedAt\",\"bannedUntil\"]},\"notice\":{\"type\":\"string\"},\"registeredAt\":{\"type\":\"string\"},\"nickname\":{\"type\":\"string\"}},\"required\":[\"id\",\"userId\",\"nickname\",\"email\",\"verified\",\"isNicknameChanged\",\"isSubscribedToMailing\",\"suspicious\",\"isConfirmed\",\"notice\",\"isBanned\",\"isDeleted\",\"hasPassword\",\"ban\",\"registeredAt\",\"lastActivity\",\"lifeTimeInterest\",\"lifeTimeInterestPercent\"]}") } } impl Agent for UserProfileGetProfileReturns { fn topic () -> & 'static str { "user_profile_getProfile" } fn method () -> & 'static str { "profile_getProfile" } fn agent () -> & 'static str { "user" } fn access_level () -> AccessLevel { AccessLevel :: Private } }