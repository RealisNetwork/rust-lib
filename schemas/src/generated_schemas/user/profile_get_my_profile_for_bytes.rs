// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; impl < 'de > Deserialize < 'de > for UserProfileGetMyProfileForBytesParams { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : Deserializer < 'de > , { serde_json :: Value :: deserialize (deserializer) ? ; Ok (UserProfileGetMyProfileForBytesParams) } } # [derive (Debug , Clone , Serialize)] pub struct UserProfileGetMyProfileForBytesParams ; impl Schema for UserProfileGetMyProfileForBytesParams { fn schema () -> Value { serde_json :: from_str ("{}") . unwrap () } } impl Agent for UserProfileGetMyProfileForBytesParams { fn topic () -> & 'static str { "user_profile_getMyProfileForBytes" } fn method () -> & 'static str { "profile_getMyProfileForBytes" } fn agent () -> & 'static str { "user" } fn access_level () -> AccessLevel { AccessLevel :: Protected } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct UserProfileGetMyProfileForBytesReturns { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "isBanned")] pub is_banned : bool , # [serde (rename = "reason" , deserialize_with = "deserialize_to_string")] pub reason : String , # [serde (rename = "isConfirmed")] pub is_confirmed : bool , # [serde (rename = "isNicknameChanged")] pub is_nickname_changed : bool , # [serde (rename = "isSubscribedToMailing")] pub is_subscribed_to_mailing : bool , # [serde (rename = "registeredAt" , deserialize_with = "deserialize_to_string")] pub registered_at : String , # [serde (rename = "nickname" , deserialize_with = "deserialize_to_string")] pub nickname : String , # [serde (rename = "email" , deserialize_with = "deserialize_to_string")] pub email : String , # [serde (rename = "notice" , deserialize_with = "deserialize_to_string")] pub notice : String , # [serde (rename = "suspicious")] pub suspicious : bool , # [serde (rename = "userId" , deserialize_with = "deserialize_to_string")] pub user_id : String , # [serde (rename = "isDeleted")] pub is_deleted : bool , # [serde (rename = "verified")] pub verified : bool } impl Schema for UserProfileGetMyProfileForBytesReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"isBanned\":{\"type\":\"boolean\"},\"reason\":{\"type\":\"string\"},\"isConfirmed\":{\"type\":\"boolean\"},\"isNicknameChanged\":{\"type\":\"boolean\"},\"isSubscribedToMailing\":{\"type\":\"boolean\"},\"registeredAt\":{\"type\":\"string\"},\"nickname\":{\"type\":\"string\"},\"email\":{\"type\":\"string\"},\"notice\":{\"type\":\"string\"},\"suspicious\":{\"type\":\"boolean\"},\"userId\":{\"type\":\"string\"},\"isDeleted\":{\"type\":\"boolean\"},\"verified\":{\"type\":\"boolean\"}},\"required\":[\"id\",\"userId\",\"nickname\",\"email\",\"verified\",\"isNicknameChanged\",\"isSubscribedToMailing\",\"suspicious\",\"isConfirmed\",\"notice\",\"isBanned\",\"isDeleted\",\"reason\",\"registeredAt\"]}") } } impl Agent for UserProfileGetMyProfileForBytesReturns { fn topic () -> & 'static str { "user_profile_getMyProfileForBytes" } fn method () -> & 'static str { "profile_getMyProfileForBytes" } fn agent () -> & 'static str { "user" } fn access_level () -> AccessLevel { AccessLevel :: Protected } }