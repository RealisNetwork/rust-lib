// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; impl < 'de > Deserialize < 'de > for UserProfileGetCountActivesParams { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : Deserializer < 'de > , { serde_json :: Value :: deserialize (deserializer) ? ; Ok (UserProfileGetCountActivesParams) } } # [derive (Debug , Clone , Serialize)] pub struct UserProfileGetCountActivesParams ; impl Schema for UserProfileGetCountActivesParams { fn schema () -> Value { serde_json :: from_str ("{}") . unwrap () } } impl Agent for UserProfileGetCountActivesParams { fn topic () -> & 'static str { "user_profile_getCountActives" } fn method () -> & 'static str { "profile_getCountActives" } fn agent () -> & 'static str { "user" } fn access_level () -> AccessLevel { AccessLevel :: Public } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct UserProfileGetCountActivesReturns (pub f64) ; impl Schema for UserProfileGetCountActivesReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}") } } impl Agent for UserProfileGetCountActivesReturns { fn topic () -> & 'static str { "user_profile_getCountActives" } fn method () -> & 'static str { "profile_getCountActives" } fn agent () -> & 'static str { "user" } fn access_level () -> AccessLevel { AccessLevel :: Public } }