// This file are autogenerated on build, everything you write here will be replaced

#![allow(unknown_lints)]
#![allow(clippy::all)]
use crate::generated_schemas::prelude::*;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct WithdrawApprovalGetAllMyTransactionsParams {
    #[serde(rename = "page")]
    pub page: f64,
    #[serde(rename = "perPage")]
    pub per_page: f64,
}
impl Schema for WithdrawApprovalGetAllMyTransactionsParams {
    fn schema() -> Value {
        serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"page\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"perPage\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}},\"required\":[\"page\",\"perPage\"]}") . unwrap ()
    }
}
impl Agent for WithdrawApprovalGetAllMyTransactionsParams {
    fn topic() -> &'static str {
        "withdraw_approval_getAllMyTransactions"
    }
    fn method() -> &'static str {
        "approval_getAllMyTransactions"
    }
    fn agent() -> &'static str {
        "withdraw"
    }
    fn access_level() -> AccessLevel {
        AccessLevel::Protected
    }
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct WithdrawApprovalGetAllMyTransactionsReturnsDataParamsParamsApproveDataParams {
    #[serde(rename = "whoConsidered")]
    pub who_considered: Option<String>,
    #[serde(rename = "approveReason")]
    pub approve_reason: Option<String>,
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct WithdrawApprovalGetAllMyTransactionsReturnsDataParamsParams {
    #[serde(rename = "id")]
    pub id: f64,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    #[serde(rename = "recipientAddress")]
    pub recipient_address: String,
    #[serde(rename = "fee")]
    pub fee: String,
    #[serde(rename = "userId")]
    pub user_id: String,
    #[serde(rename = "amount")]
    pub amount: String,
    #[serde(rename = "status")]
    pub status: String,
    #[serde(rename = "currency")]
    pub currency: String,
    #[serde(rename = "approveData")]
    pub approve_data: WithdrawApprovalGetAllMyTransactionsReturnsDataParamsParamsApproveDataParams,
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct WithdrawApprovalGetAllMyTransactionsReturns {
    #[serde(rename = "data")]
    pub data: Vec<WithdrawApprovalGetAllMyTransactionsReturnsDataParamsParams>,
    #[serde(rename = "totalCount")]
    pub total_count: f64,
}
impl Schema for WithdrawApprovalGetAllMyTransactionsReturns {
    fn schema() -> Value {
        serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"},\"recipientAddress\":{\"type\":\"string\"},\"fee\":{\"type\":\"string\"},\"userId\":{\"type\":\"string\"},\"amount\":{\"type\":\"string\"},\"status\":{\"type\":\"string\",\"pattern\":\"^(raw)|(success)$\"},\"currency\":{\"type\":\"string\",\"pattern\":\"^(ETH)|(LIS)|(WLIS)|(TLIS)$\"},\"approveData\":{\"type\":\"object\",\"properties\":{\"whoConsidered\":{\"type\":\"string\"},\"approveReason\":{\"type\":\"string\"}}}},\"required\":[\"id\",\"userId\",\"currency\",\"amount\",\"fee\",\"recipientAddress\",\"status\",\"approveData\",\"createdAt\",\"updatedAt\"]}},\"totalCount\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}},\"required\":[\"totalCount\",\"data\"]}")
    }
}
impl Agent for WithdrawApprovalGetAllMyTransactionsReturns {
    fn topic() -> &'static str {
        "withdraw_approval_getAllMyTransactions"
    }
    fn method() -> &'static str {
        "approval_getAllMyTransactions"
    }
    fn agent() -> &'static str {
        "withdraw"
    }
    fn access_level() -> AccessLevel {
        AccessLevel::Protected
    }
}
