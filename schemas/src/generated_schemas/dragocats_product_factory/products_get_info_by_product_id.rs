// This file are autogenerated on build, everything you write here will be replaced

#![allow(unknown_lints)]
#![allow(clippy::all)]
use crate::generated_schemas::prelude::*;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DragocatsProductFactoryProductsGetInfoByProductIdParams {
    #[serde(rename = "productId")]
    pub product_id: f64,
}
impl Schema for DragocatsProductFactoryProductsGetInfoByProductIdParams {
    fn schema() -> Value {
        serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"productId\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}},\"required\":[\"productId\"]}")
    }
}
impl Agent for DragocatsProductFactoryProductsGetInfoByProductIdParams {
    fn topic() -> &'static str {
        "dragocats-product-factory_products_getInfoByProductId"
    }
    fn method() -> &'static str {
        "products_getInfoByProductId"
    }
    fn agent() -> &'static str {
        "dragocats-product-factory"
    }
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DragocatsProductFactoryProductsGetInfoByProductIdReturns {
    #[serde(rename = "subType")]
    pub sub_type: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "productType")]
    pub product_type: String,
    #[serde(rename = "personalType")]
    pub personal_type: String,
    #[serde(rename = "isNft")]
    pub is_nft: bool,
}
impl Schema for DragocatsProductFactoryProductsGetInfoByProductIdReturns {
    fn schema() -> Value {
        serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"subType\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"productType\":{\"type\":\"string\"},\"personalType\":{\"type\":\"string\"},\"isNft\":{\"type\":\"boolean\"}},\"required\":[\"personalType\",\"productType\",\"subType\",\"name\",\"isNft\"]}")
    }
}
impl Agent for DragocatsProductFactoryProductsGetInfoByProductIdReturns {
    fn topic() -> &'static str {
        "dragocats-product-factory_products_getInfoByProductId"
    }
    fn method() -> &'static str {
        "products_getInfoByProductId"
    }
    fn agent() -> &'static str {
        "dragocats-product-factory"
    }
}
