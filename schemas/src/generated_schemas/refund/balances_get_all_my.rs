// This file are autogenerated on build, everything you write here will be replaced

#![allow(unknown_lints)]
#![allow(clippy::all)]
use crate::generated_schemas::prelude::*;
impl<'de> Deserialize<'de> for RefundBalancesGetAllMyParams {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        serde_json::Value::deserialize(deserializer)?;
        Ok(RefundBalancesGetAllMyParams)
    }
}
#[derive(Debug, Clone, Serialize)]
pub struct RefundBalancesGetAllMyParams;
impl Schema for RefundBalancesGetAllMyParams {
    fn schema() -> Value {
        serde_json::from_str("{}").unwrap()
    }
}
impl Agent for RefundBalancesGetAllMyParams {
    fn topic() -> &'static str {
        "refund_balances_getAllMy"
    }
    fn method() -> &'static str {
        "balances_getAllMy"
    }
    fn agent() -> &'static str {
        "refund"
    }
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RefundBalancesGetAllMyReturns {
    #[serde(rename = "ETH")]
    pub eth: Option<String>,
    #[serde(rename = "LIS")]
    pub lis: Option<String>,
}
impl Schema for RefundBalancesGetAllMyReturns {
    fn schema() -> Value {
        serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"ETH\":{\"type\":\"string\"},\"LIS\":{\"type\":\"string\"}}}")
    }
}
impl Agent for RefundBalancesGetAllMyReturns {
    fn topic() -> &'static str {
        "refund_balances_getAllMy"
    }
    fn method() -> &'static str {
        "balances_getAllMy"
    }
    fn agent() -> &'static str {
        "refund"
    }
}
