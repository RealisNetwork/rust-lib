// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct MarketPlaceMarketEndpointsGetByFilterParamsFiltersParamsParams { # [serde (rename = "column" , deserialize_with = "deserialize_to_string")] pub column : String , # [serde (rename = "value")] pub value : () } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct MarketPlaceMarketEndpointsGetByFilterParamsOrderByParams { # [serde (rename = "column" , deserialize_with = "deserialize_to_string")] pub column : String , # [serde (rename = "desc")] pub desc : bool } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct MarketPlaceMarketEndpointsGetByFilterParams { # [serde (rename = "filters")] pub filters : Option < Vec < MarketPlaceMarketEndpointsGetByFilterParamsFiltersParamsParams > > , # [serde (rename = "category" , deserialize_with = "deserialize_to_string")] pub category : String , # [serde (rename = "orderBy")] pub order_by : Option < MarketPlaceMarketEndpointsGetByFilterParamsOrderByParams > , # [serde (rename = "page")] pub page : i32 , # [serde (rename = "perPage")] pub per_page : i32 } impl Schema for MarketPlaceMarketEndpointsGetByFilterParams { fn schema () -> Value { serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"filters\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"column\":{\"type\":\"string\"},\"value\":{}},\"required\":[\"column\",\"value\"]}},\"category\":{\"type\":\"string\"},\"orderBy\":{\"type\":\"object\",\"properties\":{\"column\":{\"type\":\"string\"},\"desc\":{\"type\":\"boolean\"}},\"required\":[\"column\",\"desc\"]},\"page\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"perPage\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}}},\"required\":[\"category\",\"page\",\"perPage\"]}") . unwrap () } } impl Agent for MarketPlaceMarketEndpointsGetByFilterParams { fn topic () -> & 'static str { "market-place_marketEndpoints_getByFilter" } fn method () -> & 'static str { "marketEndpoints_getByFilter" } fn agent () -> & 'static str { "market-place" } fn access_level () -> AccessLevel { AccessLevel :: Public } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct MarketPlaceMarketEndpointsGetByFilterReturnsItemsParamsParamsAdditionalParamsParams { } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct MarketPlaceMarketEndpointsGetByFilterReturnsItemsParamsParams { # [serde (rename = "productId")] pub product_id : i32 , # [serde (rename = "additionalParams")] pub additional_params : MarketPlaceMarketEndpointsGetByFilterReturnsItemsParamsParamsAdditionalParamsParams , # [serde (rename = "subType" , deserialize_with = "deserialize_to_string")] pub sub_type : String , # [serde (rename = "price")] pub price : i32 , # [serde (rename = "createdAt")] pub created_at : i32 , # [serde (rename = "category")] pub category : i32 , # [serde (rename = "id")] pub id : i32 , # [serde (rename = "type" , deserialize_with = "deserialize_to_string")] pub r#type : String , # [serde (rename = "isLocked")] pub is_locked : bool , # [serde (rename = "personalType" , deserialize_with = "deserialize_to_string")] pub personal_type : String , # [serde (rename = "userId" , deserialize_with = "deserialize_to_string")] pub user_id : String } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct MarketPlaceMarketEndpointsGetByFilterReturns { # [serde (rename = "items")] pub items : Vec < MarketPlaceMarketEndpointsGetByFilterReturnsItemsParamsParams > , # [serde (rename = "totalCount")] pub total_count : i32 } impl Schema for MarketPlaceMarketEndpointsGetByFilterReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"items\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"productId\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"additionalParams\":{\"type\":\"object\",\"properties\":{}},\"subType\":{\"type\":\"string\"},\"price\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"createdAt\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"category\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"id\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}},\"type\":{\"type\":\"string\"},\"isLocked\":{\"type\":\"boolean\"},\"personalType\":{\"type\":\"string\"},\"userId\":{\"type\":\"string\"}},\"required\":[\"id\",\"productId\",\"userId\",\"personalType\",\"type\",\"subType\",\"price\",\"additionalParams\",\"isLocked\",\"category\",\"createdAt\"]}},\"totalCount\":{\"type\":\"integer\",\"minimum\":-2147483648,\"maximum\":2147483647,\"additionalAttributes\":{\"numberType\":\"Int\"}}},\"required\":[\"items\",\"totalCount\"]}") } } impl Agent for MarketPlaceMarketEndpointsGetByFilterReturns { fn topic () -> & 'static str { "market-place_marketEndpoints_getByFilter" } fn method () -> & 'static str { "marketEndpoints_getByFilter" } fn agent () -> & 'static str { "market-place" } fn access_level () -> AccessLevel { AccessLevel :: Public } }