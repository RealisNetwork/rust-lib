// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct NftImagesNftImageGenerateNftImagesParams { # [serde (rename = "category" , deserialize_with = "deserialize_to_string")] pub category : String , # [serde (rename = "collection" , deserialize_with = "deserialize_to_string")] pub collection : String } impl Schema for NftImagesNftImageGenerateNftImagesParams { fn schema () -> Value { serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"category\":{\"type\":\"string\",\"pattern\":\"^(cats)|(dragons)|(artifacts)$\"},\"collection\":{\"type\":\"string\"}},\"required\":[\"category\",\"collection\"]}") . unwrap () } } impl Agent for NftImagesNftImageGenerateNftImagesParams { fn topic () -> & 'static str { "nft-images_nftImage_generateNftImages" } fn method () -> & 'static str { "nftImage_generateNftImages" } fn agent () -> & 'static str { "nft-images" } fn access_level () -> AccessLevel { AccessLevel :: Private } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct NftImagesNftImageGenerateNftImagesReturns (pub bool) ; impl Schema for NftImagesNftImageGenerateNftImagesReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"boolean\"}") } } impl Agent for NftImagesNftImageGenerateNftImagesReturns { fn topic () -> & 'static str { "nft-images_nftImage_generateNftImages" } fn method () -> & 'static str { "nftImage_generateNftImages" } fn agent () -> & 'static str { "nft-images" } fn access_level () -> AccessLevel { AccessLevel :: Private } }