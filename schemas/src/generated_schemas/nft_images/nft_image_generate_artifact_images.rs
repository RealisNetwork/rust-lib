// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct NftImagesNftImageGenerateArtifactImagesParams { # [serde (rename = "collection" , deserialize_with = "deserialize_to_string")] pub collection : String } impl Schema for NftImagesNftImageGenerateArtifactImagesParams { fn schema () -> Value { serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"collection\":{\"type\":\"string\"}},\"required\":[\"collection\"]}") . unwrap () } } impl Agent for NftImagesNftImageGenerateArtifactImagesParams { fn topic () -> & 'static str { "nft-images_nftImage_generateArtifactImages" } fn method () -> & 'static str { "nftImage_generateArtifactImages" } fn agent () -> & 'static str { "nft-images" } fn access_level () -> AccessLevel { AccessLevel :: Private } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct NftImagesNftImageGenerateArtifactImagesReturns (pub bool) ; impl Schema for NftImagesNftImageGenerateArtifactImagesReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"boolean\"}") } } impl Agent for NftImagesNftImageGenerateArtifactImagesReturns { fn topic () -> & 'static str { "nft-images_nftImage_generateArtifactImages" } fn method () -> & 'static str { "nftImage_generateArtifactImages" } fn agent () -> & 'static str { "nft-images" } fn access_level () -> AccessLevel { AccessLevel :: Private } }