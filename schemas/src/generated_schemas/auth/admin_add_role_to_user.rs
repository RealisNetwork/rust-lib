// This file are autogenerated on build, everything you write here will be replaced

#![allow(unknown_lints)]
#![allow(clippy::all)]
use crate::generated_schemas::prelude::*;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AuthAdminAddRoleToUserParams {
    #[serde(rename = "userId")]
    pub user_id: String,
    #[serde(rename = "role")]
    pub role: String,
}
impl Schema for AuthAdminAddRoleToUserParams {
    fn schema() -> Value {
        serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"},\"role\":{\"type\":\"string\"}},\"required\":[\"userId\",\"role\"]}")
    }
}
impl Agent for AuthAdminAddRoleToUserParams {
    fn topic() -> &'static str {
        "auth_admin_addRoleToUser"
    }
    fn method() -> &'static str {
        "admin_addRoleToUser"
    }
    fn agent() -> &'static str {
        "auth"
    }
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AuthAdminAddRoleToUserReturns(pub bool);
impl Schema for AuthAdminAddRoleToUserReturns {
    fn schema() -> Value {
        serde_json::json!("{\"type\":\"boolean\"}")
    }
}
impl Agent for AuthAdminAddRoleToUserReturns {
    fn topic() -> &'static str {
        "auth_admin_addRoleToUser"
    }
    fn method() -> &'static str {
        "admin_addRoleToUser"
    }
    fn agent() -> &'static str {
        "auth"
    }
}
