// This file are autogenerated on build, everything you write here will be replaced

#![allow(unknown_lints)]
#![allow(clippy::all)]
use crate::generated_schemas::prelude::*;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ReferralReferralGetReferralInfoListParams {
    #[serde(rename = "perPage")]
    pub per_page: f64,
    #[serde(rename = "page")]
    pub page: f64,
    #[serde(rename = "userId", deserialize_with = "deserialize_to_string")]
    pub user_id: String,
}
impl Schema for ReferralReferralGetReferralInfoListParams {
    fn schema() -> Value {
        serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"perPage\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"page\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"userId\":{\"type\":\"string\"}},\"required\":[\"userId\",\"page\",\"perPage\"]}") . unwrap ()
    }
}
impl Agent for ReferralReferralGetReferralInfoListParams {
    fn topic() -> &'static str {
        "referral_referral_getReferralInfoList"
    }
    fn method() -> &'static str {
        "referral_getReferralInfoList"
    }
    fn agent() -> &'static str {
        "referral"
    }
    fn access_level() -> AccessLevel {
        AccessLevel::Protected
    }
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ReferralReferralGetReferralInfoListReturnsDataParamsParams {
    #[serde(rename = "userId", deserialize_with = "deserialize_to_string")]
    pub user_id: String,
    #[serde(rename = "registryDate", deserialize_with = "deserialize_to_string")]
    pub registry_date: String,
    #[serde(rename = "isBanned")]
    pub is_banned: bool,
    #[serde(rename = "nickname", deserialize_with = "deserialize_to_string")]
    pub nickname: String,
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ReferralReferralGetReferralInfoListReturns {
    #[serde(rename = "totalCount")]
    pub total_count: f64,
    #[serde(rename = "data")]
    pub data: Vec<ReferralReferralGetReferralInfoListReturnsDataParamsParams>,
}
impl Schema for ReferralReferralGetReferralInfoListReturns {
    fn schema() -> Value {
        serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"totalCount\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"},\"registryDate\":{\"type\":\"string\"},\"isBanned\":{\"type\":\"boolean\"},\"nickname\":{\"type\":\"string\"}},\"required\":[\"userId\",\"nickname\",\"isBanned\",\"registryDate\"]}}},\"required\":[\"totalCount\",\"data\"]}")
    }
}
impl Agent for ReferralReferralGetReferralInfoListReturns {
    fn topic() -> &'static str {
        "referral_referral_getReferralInfoList"
    }
    fn method() -> &'static str {
        "referral_getReferralInfoList"
    }
    fn agent() -> &'static str {
        "referral"
    }
    fn access_level() -> AccessLevel {
        AccessLevel::Protected
    }
}
