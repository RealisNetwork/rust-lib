// This file are autogenerated on build, everything you write here will be replaced

#![allow(unknown_lints)]
#![allow(clippy::all)]
use crate::generated_schemas::prelude::*;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrchestratorWalletGetByUserIdParams {
    #[serde(rename = "userId", deserialize_with = "deserialize_to_string")]
    pub user_id: String,
}
impl Schema for OrchestratorWalletGetByUserIdParams {
    fn schema() -> Value {
        serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"}},\"required\":[\"userId\"]}") . unwrap ()
    }
}
impl Agent for OrchestratorWalletGetByUserIdParams {
    fn topic() -> &'static str {
        "orchestrator_wallet_getByUserId"
    }
    fn method() -> &'static str {
        "wallet_getByUserId"
    }
    fn agent() -> &'static str {
        "orchestrator"
    }
    fn access_level() -> AccessLevel {
        AccessLevel::Private
    }
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrchestratorWalletGetByUserIdReturns {
    #[serde(rename = "address", deserialize_with = "deserialize_to_string")]
    pub address: String,
}
impl Schema for OrchestratorWalletGetByUserIdReturns {
    fn schema() -> Value {
        serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"address\":{\"type\":\"string\"}},\"required\":[\"address\"]}")
    }
}
impl Agent for OrchestratorWalletGetByUserIdReturns {
    fn topic() -> &'static str {
        "orchestrator_wallet_getByUserId"
    }
    fn method() -> &'static str {
        "wallet_getByUserId"
    }
    fn agent() -> &'static str {
        "orchestrator"
    }
    fn access_level() -> AccessLevel {
        AccessLevel::Private
    }
}
