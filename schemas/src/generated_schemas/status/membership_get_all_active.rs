// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct StatusMembershipGetAllActiveParams { # [serde (rename = "userId" , deserialize_with = "deserialize_to_string")] pub user_id : String } impl Schema for StatusMembershipGetAllActiveParams { fn schema () -> Value { serde_json :: from_str ("{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"}},\"required\":[\"userId\"]}") . unwrap () } } impl Agent for StatusMembershipGetAllActiveParams { fn topic () -> & 'static str { "status_membership_getAllActive" } fn method () -> & 'static str { "membership_getAllActive" } fn agent () -> & 'static str { "status" } fn access_level () -> AccessLevel { AccessLevel :: Protected } } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct StatusMembershipGetAllActiveReturnsParamsMembershipParams { } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct StatusMembershipGetAllActiveReturnsParams { # [serde (rename = "membership")] pub membership : StatusMembershipGetAllActiveReturnsParamsMembershipParams , # [serde (rename = "subscriptionToken" , deserialize_with = "deserialize_to_string")] pub subscription_token : String , # [serde (rename = "subscriptionTokenHash" , deserialize_with = "deserialize_to_string")] pub subscription_token_hash : String , # [serde (rename = "duration" , deserialize_with = "deserialize_to_string")] pub duration : String , # [serde (rename = "subscriptionOrderId" , deserialize_with = "deserialize_to_string")] pub subscription_order_id : String , # [serde (rename = "createdAt" , deserialize_with = "deserialize_to_string")] pub created_at : String , # [serde (rename = "updatedAt" , deserialize_with = "deserialize_to_string")] pub updated_at : String , # [serde (rename = "userId")] pub user_id : f64 , # [serde (rename = "appId")] pub app_id : f64 , # [serde (rename = "subscriptionProductId" , deserialize_with = "deserialize_to_string")] pub subscription_product_id : String , # [serde (rename = "isActive")] pub is_active : bool , # [serde (rename = "id")] pub id : f64 , # [serde (rename = "endDate" , deserialize_with = "deserialize_to_string")] pub end_date : String } # [derive (Debug , Clone , Serialize , Deserialize)] pub struct StatusMembershipGetAllActiveReturns (pub Vec < StatusMembershipGetAllActiveReturnsParams >) ; impl Schema for StatusMembershipGetAllActiveReturns { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"membership\":{\"type\":\"object\",\"properties\":{}},\"subscriptionToken\":{\"type\":\"string\"},\"subscriptionTokenHash\":{\"type\":\"string\"},\"duration\":{\"type\":\"string\"},\"subscriptionOrderId\":{\"type\":\"string\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"},\"userId\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"appId\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"subscriptionProductId\":{\"type\":\"string\"},\"isActive\":{\"type\":\"boolean\"},\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}},\"endDate\":{\"type\":\"string\"}},\"required\":[\"id\",\"userId\",\"appId\",\"isActive\",\"endDate\",\"duration\",\"subscriptionProductId\",\"subscriptionOrderId\",\"subscriptionToken\",\"subscriptionTokenHash\",\"createdAt\",\"updatedAt\",\"membership\"]}}") } } impl Agent for StatusMembershipGetAllActiveReturns { fn topic () -> & 'static str { "status_membership_getAllActive" } fn method () -> & 'static str { "membership_getAllActive" } fn agent () -> & 'static str { "status" } fn access_level () -> AccessLevel { AccessLevel :: Protected } }