// This file are autogenerated on build, everything you write here will be replaced

# ! [allow (unknown_lints)] # ! [allow (clippy :: all)] use crate :: generated_schemas :: prelude :: * ; # [derive (Debug , Clone , Serialize , Deserialize)] pub struct ProductFactoryProductMarkHeroAsNftParams { # [serde (rename = "userId")] pub user_id : String , # [serde (rename = "productId")] pub product_id : String } impl Schema for ProductFactoryProductMarkHeroAsNftParams { fn schema () -> Value { serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"userId\":{\"type\":\"string\"},\"productId\":{\"type\":\"string\"}},\"required\":[\"productId\",\"userId\"]}") } } impl Agent for ProductFactoryProductMarkHeroAsNftParams { fn topic () -> & 'static str { "productFactory_product_markHeroAsNFT" } fn method () -> & 'static str { "product_markHeroAsNFT" } fn agent () -> & 'static str { "productFactory" } } impl < 'de > Deserialize < 'de > for ProductFactoryProductMarkHeroAsNftReturns { fn deserialize < D > (_deserializer : D) -> Result < Self , D :: Error > where D : Deserializer < 'de > , { Ok (ProductFactoryProductMarkHeroAsNftReturns) } } # [derive (Debug , Clone , Serialize)] pub struct ProductFactoryProductMarkHeroAsNftReturns ; impl Schema for ProductFactoryProductMarkHeroAsNftReturns { fn schema () -> Value { serde_json :: json ! ("{}") } } impl Agent for ProductFactoryProductMarkHeroAsNftReturns { fn topic () -> & 'static str { "productFactory_product_markHeroAsNFT" } fn method () -> & 'static str { "product_markHeroAsNFT" } fn agent () -> & 'static str { "productFactory" } }