// This file are autogenerated on build, everything you write here will be replaced

#![allow(unknown_lints)]
#![allow(clippy::all)]
use crate::generated_schemas::prelude::*;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ProductFactoryProductTypeGetParams {
    #[serde(rename = "id")]
    pub id: i64,
}
impl Schema for ProductFactoryProductTypeGetParams {
    fn schema() -> Value {
        serde_json :: json ! ("{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"minimum\":-9223372036854775808,\"maximum\":9223372036854775807,\"additionalAttributes\":{\"numberType\":\"Number\"}}},\"required\":[\"id\"]}")
    }
}
impl Agent for ProductFactoryProductTypeGetParams {
    fn topic() -> &'static str {
        "productFactory_productType_get"
    }
    fn method() -> &'static str {
        "productType_get"
    }
    fn agent() -> &'static str {
        "productFactory"
    }
}
impl<'de> Deserialize<'de> for ProductFactoryProductTypeGetReturns {
    fn deserialize<D>(_deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        Ok(ProductFactoryProductTypeGetReturns)
    }
}
#[derive(Debug, Clone, Serialize)]
pub struct ProductFactoryProductTypeGetReturns;
impl Schema for ProductFactoryProductTypeGetReturns {
    fn schema() -> Value {
        serde_json::json!("{}")
    }
}
impl Agent for ProductFactoryProductTypeGetReturns {
    fn topic() -> &'static str {
        "productFactory_productType_get"
    }
    fn method() -> &'static str {
        "productType_get"
    }
    fn agent() -> &'static str {
        "productFactory"
    }
}
