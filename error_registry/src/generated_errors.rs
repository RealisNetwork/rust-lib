/// This errors are autogenerated. In case you want to add any custom error, please use Custom file, otherwise all changes will be deleted on next recompilation 


use serde :: { Serialize , Deserialize } ; # [serde (untagged)] # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum GeneratedError { ProductFactory (ProductFactory) , Promo (Promo) , Common (Common) , Bff (Bff) , Soul (Soul) , Action (Action) , RestorePassword (RestorePassword) , Status (Status) , Orchestrator (Orchestrator) , Redis (Redis) , Transactions (Transactions) , Geo (Geo) , Utils (Utils) , Validation (Validation) , CatsAndDragons (CatsAndDragons) , Roles (Roles) , GooglePlay (GooglePlay) , Fs (Fs) , Auth (Auth) , ProductRegistry (ProductRegistry) , Db (Db) , AdminOptions (AdminOptions) , Referrals (Referrals) , Profile (Profile) , Functions (Functions) , Permissions (Permissions) , Cron (Cron) , Http (Http) , BytesFormatter (BytesFormatter) , TwoFactorAuth (TwoFactorAuth) , Bytes (Bytes) , Nats (Nats) , Blockchain (Blockchain) , }
# [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum ProductFactory { # [serde (rename = "productFactory.invalidChance")] InvalidChance , # [serde (rename = "productFactory.invalidLimit")] InvalidLimit , # [serde (rename = "productFactory.invalidProductType")] InvalidProductType , # [serde (rename = "productFactory.attributesGeneration")] AttributesGeneration , # [serde (rename = "productFactory.lootboxDropGeneration")] LootboxDropGeneration , } impl ToString for ProductFactory { fn to_string (& self) -> String { match self { Self :: InvalidChance => "productFactory.invalidChance" . to_string () , Self :: InvalidLimit => "productFactory.invalidLimit" . to_string () , Self :: InvalidProductType => "productFactory.invalidProductType" . to_string () , Self :: AttributesGeneration => "productFactory.attributesGeneration" . to_string () , Self :: LootboxDropGeneration => "productFactory.lootboxDropGeneration" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Promo { # [serde (rename = "promo.codeIsAlreadyUsed")] CodeIsAlreadyUsed , # [serde (rename = "promo.codeNotExists")] CodeNotExists , # [serde (rename = "promo.internalError")] InternalError , # [serde (rename = "promo.codeExpired")] CodeExpired , } impl ToString for Promo { fn to_string (& self) -> String { match self { Self :: CodeIsAlreadyUsed => "promo.codeIsAlreadyUsed" . to_string () , Self :: CodeNotExists => "promo.codeNotExists" . to_string () , Self :: InternalError => "promo.internalError" . to_string () , Self :: CodeExpired => "promo.codeExpired" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Common { # [serde (rename = "common.unknown")] Unknown , # [serde (rename = "common.internalServerError")] InternalServerError , } impl ToString for Common { fn to_string (& self) -> String { match self { Self :: Unknown => "common.unknown" . to_string () , Self :: InternalServerError => "common.internalServerError" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Bff { # [serde (rename = "bff.invalidMethod")] InvalidMethod , # [serde (rename = "bff.invalidAgent")] InvalidAgent , } impl ToString for Bff { fn to_string (& self) -> String { match self { Self :: InvalidMethod => "bff.invalidMethod" . to_string () , Self :: InvalidAgent => "bff.invalidAgent" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Soul { # [serde (rename = "soul.getData")] GetData , # [serde (rename = "soul.txAlreadySending")] TxAlreadySending , # [serde (rename = "soul.callContractMethod")] CallContractMethod , } impl ToString for Soul { fn to_string (& self) -> String { match self { Self :: GetData => "soul.getData" . to_string () , Self :: TxAlreadySending => "soul.txAlreadySending" . to_string () , Self :: CallContractMethod => "soul.callContractMethod" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Action { # [serde (rename = "action.notCancelable")] NotCancelable , } impl ToString for Action { fn to_string (& self) -> String { match self { Self :: NotCancelable => "action.notCancelable" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum RestorePassword { # [serde (rename = "restorePassword.expiredToken")] ExpiredToken , } impl ToString for RestorePassword { fn to_string (& self) -> String { match self { Self :: ExpiredToken => "restorePassword.expiredToken" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Status { # [serde (rename = "status.delete")] Delete , # [serde (rename = "status.add")] Add , # [serde (rename = "status.get")] Get , # [serde (rename = "status.update")] Update , } impl ToString for Status { fn to_string (& self) -> String { match self { Self :: Delete => "status.delete" . to_string () , Self :: Add => "status.add" . to_string () , Self :: Get => "status.get" . to_string () , Self :: Update => "status.update" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Orchestrator { # [serde (rename = "orchestrator.zeroAmount")] ZeroAmount , } impl ToString for Orchestrator { fn to_string (& self) -> String { match self { Self :: ZeroAmount => "orchestrator.zeroAmount" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Redis { # [serde (rename = "redis.internalServerError")] InternalServerError , # [serde (rename = "redis.notFound")] NotFound , # [serde (rename = "redis.parse")] Parse , } impl ToString for Redis { fn to_string (& self) -> String { match self { Self :: InternalServerError => "redis.internalServerError" . to_string () , Self :: NotFound => "redis.notFound" . to_string () , Self :: Parse => "redis.parse" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Transactions { # [serde (rename = "transactions.notEnoughBalance")] NotEnoughBalance , # [serde (rename = "transactions.updateBalanceRecord")] UpdateBalanceRecord , } impl ToString for Transactions { fn to_string (& self) -> String { match self { Self :: NotEnoughBalance => "transactions.notEnoughBalance" . to_string () , Self :: UpdateBalanceRecord => "transactions.updateBalanceRecord" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Geo { # [serde (rename = "geo.internalError")] InternalError , # [serde (rename = "geo.invalidCountry")] InvalidCountry , # [serde (rename = "geo.invalidContinent")] InvalidContinent , # [serde (rename = "geo.invalidIp")] InvalidIp , } impl ToString for Geo { fn to_string (& self) -> String { match self { Self :: InternalError => "geo.internalError" . to_string () , Self :: InvalidCountry => "geo.invalidCountry" . to_string () , Self :: InvalidContinent => "geo.invalidContinent" . to_string () , Self :: InvalidIp => "geo.invalidIp" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Utils { # [serde (rename = "utils.decryption")] Decryption , } impl ToString for Utils { fn to_string (& self) -> String { match self { Self :: Decryption => "utils.decryption" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Validation { # [serde (rename = "validation.doesNotMatchPattern")] DoesNotMatchPattern , # [serde (rename = "validation.invalid")] Invalid , } impl ToString for Validation { fn to_string (& self) -> String { match self { Self :: DoesNotMatchPattern => "validation.doesNotMatchPattern" . to_string () , Self :: Invalid => "validation.invalid" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum CatsAndDragons { # [serde (rename = "catsAndDragons.errorWithConnectionToMicroservice")] ErrorWithConnectionToMicroservice , # [serde (rename = "catsAndDragons.noSuchTask")] NoSuchTask , # [serde (rename = "catsAndDragons.invalidOfferToroAmountFormat")] InvalidOfferToroAmountFormat , # [serde (rename = "catsAndDragons.invalidDeviceId")] InvalidDeviceId , # [serde (rename = "catsAndDragons.noUserId")] NoUserId , # [serde (rename = "catsAndDragons.scoreParseError")] ScoreParseError , # [serde (rename = "catsAndDragons.noAppId")] NoAppId , # [serde (rename = "catsAndDragons.noName")] NoName , # [serde (rename = "catsAndDragons.spendingRecordUnsuccessful")] SpendingRecordUnsuccessful , # [serde (rename = "catsAndDragons.noPurchaseRecord")] NoPurchaseRecord , # [serde (rename = "catsAndDragons.noMailOrPassword")] NoMailOrPassword , # [serde (rename = "catsAndDragons.noPaymentState")] NoPaymentState , # [serde (rename = "catsAndDragons.noScore")] NoScore , # [serde (rename = "catsAndDragons.noTaskId")] NoTaskId , # [serde (rename = "catsAndDragons.cantCreateTransaction")] CantCreateTransaction , # [serde (rename = "catsAndDragons.invalidTransactionId")] InvalidTransactionId , # [serde (rename = "catsAndDragons.noBingoItem")] NoBingoItem , # [serde (rename = "catsAndDragons.cantBuyScience")] CantBuyScience , # [serde (rename = "catsAndDragons.invalidTaskId")] InvalidTaskId , # [serde (rename = "catsAndDragons.noSuchTaskReward")] NoSuchTaskReward , # [serde (rename = "catsAndDragons.noOfferToroAmount")] NoOfferToroAmount , # [serde (rename = "catsAndDragons.taskIsOutOfDate")] TaskIsOutOfDate , # [serde (rename = "catsAndDragons.authenticationAndProfileWebIdNotEqual")] AuthenticationAndProfileWebIdNotEqual , # [serde (rename = "catsAndDragons.membershipSubscriptionPurchaseRecordDoesNotExist")] MembershipSubscriptionPurchaseRecordDoesNotExist , # [serde (rename = "catsAndDragons.webIdNotFound")] WebIdNotFound , # [serde (rename = "catsAndDragons.invalidJson")] InvalidJson , # [serde (rename = "catsAndDragons.noDeviceAttached")] NoDeviceAttached , # [serde (rename = "catsAndDragons.noSuchStrategy")] NoSuchStrategy , # [serde (rename = "catsAndDragons.invalidProductType")] InvalidProductType , # [serde (rename = "catsAndDragons.doubleRequest")] DoubleRequest , # [serde (rename = "catsAndDragons.accountWithWebidHasProgress")] AccountWithWebidHasProgress , # [serde (rename = "catsAndDragons.unsuccessfulLootboxDataUpdate")] UnsuccessfulLootboxDataUpdate , # [serde (rename = "catsAndDragons.authorizationFail")] AuthorizationFail , # [serde (rename = "catsAndDragons.invalidCardId")] InvalidCardId , # [serde (rename = "catsAndDragons.productIdEmptyOrNull")] ProductIdEmptyOrNull , # [serde (rename = "catsAndDragons.mapLevelIsEmpty")] MapLevelIsEmpty , # [serde (rename = "catsAndDragons.transactionTypeIsNull")] TransactionTypeIsNull , # [serde (rename = "catsAndDragons.couldNotCreditHardCurrency")] CouldNotCreditHardCurrency , # [serde (rename = "catsAndDragons.undergoingServerMaintenance")] UndergoingServerMaintenance , # [serde (rename = "catsAndDragons.invalidMultiplier")] InvalidMultiplier , # [serde (rename = "catsAndDragons.purchaseRefunded")] PurchaseRefunded , # [serde (rename = "catsAndDragons.offerIsUnavailable")] OfferIsUnavailable , # [serde (rename = "catsAndDragons.questRewardCloningFailed")] QuestRewardCloningFailed , # [serde (rename = "catsAndDragons.cantDebitHardCurrency")] CantDebitHardCurrency , # [serde (rename = "catsAndDragons.referrerIdParseError")] ReferrerIdParseError , # [serde (rename = "catsAndDragons.webRequestError")] WebRequestError , # [serde (rename = "catsAndDragons.catIdParseError")] CatIdParseError , # [serde (rename = "catsAndDragons.cantParseDateTimeFormat")] CantParseDateTimeFormat , # [serde (rename = "catsAndDragons.invalidIsNull")] InvalidIsNull , # [serde (rename = "catsAndDragons.noBingoRecipeId")] NoBingoRecipeId , # [serde (rename = "catsAndDragons.noReferralLink")] NoReferralLink , # [serde (rename = "catsAndDragons.hardCurrencyLessOne")] HardCurrencyLessOne , # [serde (rename = "catsAndDragons.amountLessOne")] AmountLessOne , # [serde (rename = "catsAndDragons.toWebIdLinked")] ToWebIdLinked , # [serde (rename = "catsAndDragons.unknownPurchaseStatus")] UnknownPurchaseStatus , # [serde (rename = "catsAndDragons.noTheoremReachReward")] NoTheoremReachReward , # [serde (rename = "catsAndDragons.invalidParseSurveyToken")] InvalidParseSurveyToken , # [serde (rename = "catsAndDragons.invalidPaymentStateForSubscriptionRenewal")] InvalidPaymentStateForSubscriptionRenewal , # [serde (rename = "catsAndDragons.toWebIdNotExists")] ToWebIdNotExists , # [serde (rename = "catsAndDragons.errorWithDatabaseColumnName")] ErrorWithDatabaseColumnName , # [serde (rename = "catsAndDragons.invalidAppId")] InvalidAppId , # [serde (rename = "catsAndDragons.nickChangeCooldownIsNotExpired")] NickChangeCooldownIsNotExpired , # [serde (rename = "catsAndDragons.notEnoughBingoItemAmount")] NotEnoughBingoItemAmount , # [serde (rename = "catsAndDragons.profileIsNull")] ProfileIsNull , # [serde (rename = "catsAndDragons.invalidAppIdOrSecureKey")] InvalidAppIdOrSecureKey , # [serde (rename = "catsAndDragons.noProductId")] NoProductId , # [serde (rename = "catsAndDragons.noServiceNeeded")] NoServiceNeeded , # [serde (rename = "catsAndDragons.requiredScienceNotFound")] RequiredScienceNotFound , # [serde (rename = "catsAndDragons.noSpinType")] NoSpinType , # [serde (rename = "catsAndDragons.invalidStatusPurchaseAppIdFormat")] InvalidStatusPurchaseAppIdFormat , # [serde (rename = "catsAndDragons.webIdEmptyOrNull")] WebIdEmptyOrNull , # [serde (rename = "catsAndDragons.invalidPurchaseParam")] InvalidPurchaseParam , # [serde (rename = "catsAndDragons.unavailableOfferRecordUnsuccessful")] UnavailableOfferRecordUnsuccessful , # [serde (rename = "catsAndDragons.invalidEventId")] InvalidEventId , # [serde (rename = "catsAndDragons.unlinkingTheDeviceMoreThanOnceAWeek")] UnlinkingTheDeviceMoreThanOnceAWeek , # [serde (rename = "catsAndDragons.crossreferralNotAllowed")] CrossreferralNotAllowed , # [serde (rename = "catsAndDragons.nicknameIsTooShort")] NicknameIsTooShort , # [serde (rename = "catsAndDragons.noStatusPurchaseAppId")] NoStatusPurchaseAppId , # [serde (rename = "catsAndDragons.configWasNotFound")] ConfigWasNotFound , # [serde (rename = "catsAndDragons.invalidSecureKey")] InvalidSecureKey , # [serde (rename = "catsAndDragons.saveDataNotFound")] SaveDataNotFound , # [serde (rename = "catsAndDragons.invalidMembership")] InvalidMembership , # [serde (rename = "catsAndDragons.capitalizationChecksumTestFailedOrInvalidEthereumWallet")] CapitalizationChecksumTestFailedOrInvalidEthereumWallet , # [serde (rename = "catsAndDragons.invalidTheoremReachReward")] InvalidTheoremReachReward , # [serde (rename = "catsAndDragons.subscriptionPaymentPending")] SubscriptionPaymentPending , # [serde (rename = "catsAndDragons.hardCurrencyNullOrEmpty")] HardCurrencyNullOrEmpty , # [serde (rename = "catsAndDragons.invalidRecipeId")] InvalidRecipeId , # [serde (rename = "catsAndDragons.purchaseValidationUnsuccessful")] PurchaseValidationUnsuccessful , # [serde (rename = "catsAndDragons.noOfferKey")] NoOfferKey , # [serde (rename = "catsAndDragons.invalidSurveyToken")] InvalidSurveyToken , # [serde (rename = "catsAndDragons.invalidScore")] InvalidScore , # [serde (rename = "catsAndDragons.purchasePending")] PurchasePending , # [serde (rename = "catsAndDragons.purchaseReceiptEmptyOrNull")] PurchaseReceiptEmptyOrNull , # [serde (rename = "catsAndDragons.notEnoughMoneyOnBalance")] NotEnoughMoneyOnBalance , # [serde (rename = "catsAndDragons.noJsonData")] NoJsonData , # [serde (rename = "catsAndDragons.noNick")] NoNick , # [serde (rename = "catsAndDragons.referrerCodeParseError")] ReferrerCodeParseError , # [serde (rename = "catsAndDragons.cantUpdateTransaction")] CantUpdateTransaction , # [serde (rename = "catsAndDragons.invalidOfferKey")] InvalidOfferKey , # [serde (rename = "catsAndDragons.scoreCannotBeLessThanZero")] ScoreCannotBeLessThanZero , # [serde (rename = "catsAndDragons.invalidBalance")] InvalidBalance , # [serde (rename = "catsAndDragons.priceParseError")] PriceParseError , # [serde (rename = "catsAndDragons.invalidHardCurrencyTransactionType")] InvalidHardCurrencyTransactionType , # [serde (rename = "catsAndDragons.noCatId")] NoCatId , # [serde (rename = "catsAndDragons.noMembership")] NoMembership , # [serde (rename = "catsAndDragons.missingParameter")] MissingParameter , # [serde (rename = "catsAndDragons.noTask")] NoTask , # [serde (rename = "catsAndDragons.referralTaskRewardAlreadyTaken")] ReferralTaskRewardAlreadyTaken , # [serde (rename = "catsAndDragons.noHandlerInApp")] NoHandlerInApp , # [serde (rename = "catsAndDragons.invitedUserDoesNotExists")] InvitedUserDoesNotExists , # [serde (rename = "catsAndDragons.undergoingServerUpdate")] UndergoingServerUpdate , # [serde (rename = "catsAndDragons.invalidNick")] InvalidNick , # [serde (rename = "catsAndDragons.noIp")] NoIp , # [serde (rename = "catsAndDragons.achievementCompleted")] AchievementCompleted , # [serde (rename = "catsAndDragons.noDeviceId")] NoDeviceId , # [serde (rename = "catsAndDragons.invalidOid")] InvalidOid , # [serde (rename = "catsAndDragons.surveyIsAlreadyRecorded")] SurveyIsAlreadyRecorded , # [serde (rename = "catsAndDragons.invalidWebId")] InvalidWebId , # [serde (rename = "catsAndDragons.emailAlreadyInUse")] EmailAlreadyInUse , # [serde (rename = "catsAndDragons.rewardsIsNull")] RewardsIsNull , # [serde (rename = "catsAndDragons.deviceIdEmptyOrNull")] DeviceIdEmptyOrNull , # [serde (rename = "catsAndDragons.userInBlackList")] UserInBlackList , # [serde (rename = "catsAndDragons.purchaseCanceled")] PurchaseCanceled , # [serde (rename = "catsAndDragons.accountIsAlreadyTied")] AccountIsAlreadyTied , # [serde (rename = "catsAndDragons.webIdAlreadyDefaultOrNotExists")] WebIdAlreadyDefaultOrNotExists , # [serde (rename = "catsAndDragons.noEndDate")] NoEndDate , # [serde (rename = "catsAndDragons.endDateIsLessThanStartDate")] EndDateIsLessThanStartDate , # [serde (rename = "catsAndDragons.oneRequestKeyWithMultipleValues")] OneRequestKeyWithMultipleValues , # [serde (rename = "catsAndDragons.bingoRecipeNotCrafted")] BingoRecipeNotCrafted , # [serde (rename = "catsAndDragons.invalidCurrencyType")] InvalidCurrencyType , # [serde (rename = "catsAndDragons.invalidPurchaseKey")] InvalidPurchaseKey , # [serde (rename = "catsAndDragons.membershipSubscriptionPurchaseIsNotAvailable")] MembershipSubscriptionPurchaseIsNotAvailable , # [serde (rename = "catsAndDragons.purchaseRewardUnsuccessful")] PurchaseRewardUnsuccessful , # [serde (rename = "catsAndDragons.subscriptionRenewalNumberIsSame")] SubscriptionRenewalNumberIsSame , # [serde (rename = "catsAndDragons.cardMaxLevelNotFound")] CardMaxLevelNotFound , # [serde (rename = "catsAndDragons.noPrice")] NoPrice , # [serde (rename = "catsAndDragons.purchaseKeyEmptyOrNull")] PurchaseKeyEmptyOrNull , # [serde (rename = "catsAndDragons.noInappPurchaseData")] NoInappPurchaseData , # [serde (rename = "catsAndDragons.invalidAppMetricaDeviceId")] InvalidAppMetricaDeviceId , # [serde (rename = "catsAndDragons.invalidProductId")] InvalidProductId , # [serde (rename = "catsAndDragons.noHardCurrency")] NoHardCurrency , # [serde (rename = "catsAndDragons.invalidPurchase")] InvalidPurchase , # [serde (rename = "catsAndDragons.jsonEmptyOrNull")] JsonEmptyOrNull , # [serde (rename = "catsAndDragons.mapLevelTooLow")] MapLevelTooLow , # [serde (rename = "catsAndDragons.noPurchaseTokenData")] NoPurchaseTokenData , # [serde (rename = "catsAndDragons.userHasNotCompletedRequiredAmountOfAchievements")] UserHasNotCompletedRequiredAmountOfAchievements , # [serde (rename = "catsAndDragons.noPurchaseToken")] NoPurchaseToken , # [serde (rename = "catsAndDragons.userIsNotAllowedToCompleteTask")] UserIsNotAllowedToCompleteTask , # [serde (rename = "catsAndDragons.taskListEmpty")] TaskListEmpty , # [serde (rename = "catsAndDragons.invitedUserAlreadyHaveCompletedAchievements")] InvitedUserAlreadyHaveCompletedAchievements , # [serde (rename = "catsAndDragons.userWhoInvitesAndInvitedUserAreSame")] UserWhoInvitesAndInvitedUserAreSame , # [serde (rename = "catsAndDragons.noPurchaseKey")] NoPurchaseKey , # [serde (rename = "catsAndDragons.notEnoughScience")] NotEnoughScience , # [serde (rename = "catsAndDragons.offerKeyEmptyOrNull")] OfferKeyEmptyOrNull , # [serde (rename = "catsAndDragons.noConfigKey")] NoConfigKey , # [serde (rename = "catsAndDragons.scoreCannotBeMoreThanLimit")] ScoreCannotBeMoreThanLimit , # [serde (rename = "catsAndDragons.cantUpdateAppmetricaDeviceId")] CantUpdateAppmetricaDeviceId , # [serde (rename = "catsAndDragons.transactionIdParseError")] TransactionIdParseError , # [serde (rename = "catsAndDragons.noCardId")] NoCardId , # [serde (rename = "catsAndDragons.invalidToken")] InvalidToken , # [serde (rename = "catsAndDragons.invalidMultiplierFormat")] InvalidMultiplierFormat , # [serde (rename = "catsAndDragons.userIsNotConnected")] UserIsNotConnected , # [serde (rename = "catsAndDragons.invalidValidation")] InvalidValidation , # [serde (rename = "catsAndDragons.noSuchSkillKey")] NoSuchSkillKey , # [serde (rename = "catsAndDragons.nickAlreadyExists")] NickAlreadyExists , # [serde (rename = "catsAndDragons.noStartDate")] NoStartDate , # [serde (rename = "catsAndDragons.invalidResponseCode")] InvalidResponseCode , # [serde (rename = "catsAndDragons.noJson")] NoJson , # [serde (rename = "catsAndDragons.invalidSpinType")] InvalidSpinType , # [serde (rename = "catsAndDragons.invalidStoreType")] InvalidStoreType , # [serde (rename = "catsAndDragons.noAppMetricaDeviceId")] NoAppMetricaDeviceId , # [serde (rename = "catsAndDragons.noOid")] NoOid , # [serde (rename = "catsAndDragons.invalidConfigKey")] InvalidConfigKey , # [serde (rename = "catsAndDragons.membershipNotExists")] MembershipNotExists , # [serde (rename = "catsAndDragons.invalidHardCurrencyFormat")] InvalidHardCurrencyFormat , # [serde (rename = "catsAndDragons.transactionIdNullOrEmpty")] TransactionIdNullOrEmpty , # [serde (rename = "catsAndDragons.scoreEmptyOrNull")] ScoreEmptyOrNull , # [serde (rename = "catsAndDragons.notEnoughCardExperience")] NotEnoughCardExperience , # [serde (rename = "catsAndDragons.invalidStatusPurchaseAppId")] InvalidStatusPurchaseAppId , # [serde (rename = "catsAndDragons.userNotExist")] UserNotExist , # [serde (rename = "catsAndDragons.unknownLootboxRewardType")] UnknownLootboxRewardType , # [serde (rename = "catsAndDragons.noStoreType")] NoStoreType , # [serde (rename = "catsAndDragons.noWebId")] NoWebId , # [serde (rename = "catsAndDragons.noPurchaseParam")] NoPurchaseParam , # [serde (rename = "catsAndDragons.lootboxIdParseError")] LootboxIdParseError , # [serde (rename = "catsAndDragons.noMultiplier")] NoMultiplier , # [serde (rename = "catsAndDragons.cardInfoNotFound")] CardInfoNotFound , # [serde (rename = "catsAndDragons.noTransactionId")] NoTransactionId , # [serde (rename = "catsAndDragons.noToken")] NoToken , # [serde (rename = "catsAndDragons.noReferralCode")] NoReferralCode , # [serde (rename = "catsAndDragons.catPurchaseParseError")] CatPurchaseParseError , # [serde (rename = "catsAndDragons.noSurveyUserId")] NoSurveyUserId , # [serde (rename = "catsAndDragons.offerKeyNotExists")] OfferKeyNotExists , # [serde (rename = "catsAndDragons.noSuchAchievement")] NoSuchAchievement , # [serde (rename = "catsAndDragons.noLootboxId")] NoLootboxId , # [serde (rename = "catsAndDragons.invalidLootboxId")] InvalidLootboxId , # [serde (rename = "catsAndDragons.webDataNotFound")] WebDataNotFound , # [serde (rename = "catsAndDragons.noTheoremReachTransactionId")] NoTheoremReachTransactionId , # [serde (rename = "catsAndDragons.appKeyNotExist")] AppKeyNotExist , # [serde (rename = "catsAndDragons.noPurchaseReceipt")] NoPurchaseReceipt , # [serde (rename = "catsAndDragons.emailNotVerified")] EmailNotVerified , # [serde (rename = "catsAndDragons.cardUpgradeInfoNotFound")] CardUpgradeInfoNotFound , # [serde (rename = "catsAndDragons.cardAlreadyAtMaxLevel")] CardAlreadyAtMaxLevel , # [serde (rename = "catsAndDragons.noLevel")] NoLevel , # [serde (rename = "catsAndDragons.usersLootboxAmountIsNotEnough")] UsersLootboxAmountIsNotEnough , # [serde (rename = "catsAndDragons.subscriptionIsInTrialPeriod")] SubscriptionIsInTrialPeriod , # [serde (rename = "catsAndDragons.invitedUserWasInvitedBefore")] InvitedUserWasInvitedBefore , # [serde (rename = "catsAndDragons.invalidConfigJson")] InvalidConfigJson , # [serde (rename = "catsAndDragons.passwordEmptyOrNull")] PasswordEmptyOrNull , # [serde (rename = "catsAndDragons.deviceIsOccupied")] DeviceIsOccupied , # [serde (rename = "catsAndDragons.alreadyAuthorized")] AlreadyAuthorized , # [serde (rename = "catsAndDragons.bingoSeasonIsNoActive")] BingoSeasonIsNoActive , # [serde (rename = "catsAndDragons.noAchievements")] NoAchievements , # [serde (rename = "catsAndDragons.orderIdParseError")] OrderIdParseError , # [serde (rename = "catsAndDragons.noAdSpinsAvailable")] NoAdSpinsAvailable , # [serde (rename = "catsAndDragons.notAllowed")] NotAllowed , # [serde (rename = "catsAndDragons.notEnoughTokensOnBalance")] NotEnoughTokensOnBalance , # [serde (rename = "catsAndDragons.theoremReachTransactionIdEmptyOrNull")] TheoremReachTransactionIdEmptyOrNull , # [serde (rename = "catsAndDragons.thisDeviceIdIsOccupied")] ThisDeviceIdIsOccupied , # [serde (rename = "catsAndDragons.userMembershipIsHigher")] UserMembershipIsHigher , # [serde (rename = "catsAndDragons.userWhoInvitesDoesNotExists")] UserWhoInvitesDoesNotExists , # [serde (rename = "catsAndDragons.invalidScienceName")] InvalidScienceName , # [serde (rename = "catsAndDragons.cantFindHardCurrencyTransactionType")] CantFindHardCurrencyTransactionType , # [serde (rename = "catsAndDragons.invalidClientVersion")] InvalidClientVersion , # [serde (rename = "catsAndDragons.usersLootboxNotFound")] UsersLootboxNotFound , # [serde (rename = "catsAndDragons.exchangeWebRequestError")] ExchangeWebRequestError , # [serde (rename = "catsAndDragons.disconnect")] Disconnect , # [serde (rename = "catsAndDragons.invalidCurrencyPurchaseKey")] InvalidCurrencyPurchaseKey , # [serde (rename = "catsAndDragons.noSaveData")] NoSaveData , # [serde (rename = "catsAndDragons.noConfigJson")] NoConfigJson , # [serde (rename = "catsAndDragons.lootboxIsOnCooldown")] LootboxIsOnCooldown , # [serde (rename = "catsAndDragons.invalidIp")] InvalidIp , # [serde (rename = "catsAndDragons.invalidSkillKey")] InvalidSkillKey , # [serde (rename = "catsAndDragons.errorWithNameOfDatabaseRelation")] ErrorWithNameOfDatabaseRelation , # [serde (rename = "catsAndDragons.purchaseInitialized")] PurchaseInitialized , # [serde (rename = "catsAndDragons.invalidMailOrPassword")] InvalidMailOrPassword , # [serde (rename = "catsAndDragons.noReferrerCode")] NoReferrerCode , # [serde (rename = "catsAndDragons.invalidPurchaseReceiptOrStoreId")] InvalidPurchaseReceiptOrStoreId , # [serde (rename = "catsAndDragons.ipEmptyOrNull")] IpEmptyOrNull , # [serde (rename = "catsAndDragons.referrerSetUnsuccessful")] ReferrerSetUnsuccessful , # [serde (rename = "catsAndDragons.nicknameIsTooLong")] NicknameIsTooLong , # [serde (rename = "catsAndDragons.taskCompleted")] TaskCompleted , # [serde (rename = "catsAndDragons.invalidTheoremReachTransactionId")] InvalidTheoremReachTransactionId , # [serde (rename = "catsAndDragons.noSecureKey")] NoSecureKey , # [serde (rename = "catsAndDragons.invalidAmountFormat")] InvalidAmountFormat , # [serde (rename = "catsAndDragons.invalidPurchaseType")] InvalidPurchaseType , # [serde (rename = "catsAndDragons.chestLevelIsUnavailable")] ChestLevelIsUnavailable , # [serde (rename = "catsAndDragons.purchaseRecordUnsuccessful")] PurchaseRecordUnsuccessful , # [serde (rename = "catsAndDragons.invalidMembershipTypeForPurchase")] InvalidMembershipTypeForPurchase , # [serde (rename = "catsAndDragons.noProductType")] NoProductType , # [serde (rename = "catsAndDragons.nicknameEmptyOrNull")] NicknameEmptyOrNull , # [serde (rename = "catsAndDragons.noDepositAmount")] NoDepositAmount , # [serde (rename = "catsAndDragons.serverTemporarilyUnavailable")] ServerTemporarilyUnavailable , # [serde (rename = "catsAndDragons.noCompletedTasks")] NoCompletedTasks , # [serde (rename = "catsAndDragons.cantFindStorePurchase")] CantFindStorePurchase , # [serde (rename = "catsAndDragons.thisDeviceIdNotExists")] ThisDeviceIdNotExists , # [serde (rename = "catsAndDragons.invalidReferrerId")] InvalidReferrerId , # [serde (rename = "catsAndDragons.usersCardNotFound")] UsersCardNotFound , # [serde (rename = "catsAndDragons.successWithoutCredit")] SuccessWithoutCredit , } impl ToString for CatsAndDragons { fn to_string (& self) -> String { match self { Self :: ErrorWithConnectionToMicroservice => "catsAndDragons.errorWithConnectionToMicroservice" . to_string () , Self :: NoSuchTask => "catsAndDragons.noSuchTask" . to_string () , Self :: InvalidOfferToroAmountFormat => "catsAndDragons.invalidOfferToroAmountFormat" . to_string () , Self :: InvalidDeviceId => "catsAndDragons.invalidDeviceId" . to_string () , Self :: NoUserId => "catsAndDragons.noUserId" . to_string () , Self :: ScoreParseError => "catsAndDragons.scoreParseError" . to_string () , Self :: NoAppId => "catsAndDragons.noAppId" . to_string () , Self :: NoName => "catsAndDragons.noName" . to_string () , Self :: SpendingRecordUnsuccessful => "catsAndDragons.spendingRecordUnsuccessful" . to_string () , Self :: NoPurchaseRecord => "catsAndDragons.noPurchaseRecord" . to_string () , Self :: NoMailOrPassword => "catsAndDragons.noMailOrPassword" . to_string () , Self :: NoPaymentState => "catsAndDragons.noPaymentState" . to_string () , Self :: NoScore => "catsAndDragons.noScore" . to_string () , Self :: NoTaskId => "catsAndDragons.noTaskId" . to_string () , Self :: CantCreateTransaction => "catsAndDragons.cantCreateTransaction" . to_string () , Self :: InvalidTransactionId => "catsAndDragons.invalidTransactionId" . to_string () , Self :: NoBingoItem => "catsAndDragons.noBingoItem" . to_string () , Self :: CantBuyScience => "catsAndDragons.cantBuyScience" . to_string () , Self :: InvalidTaskId => "catsAndDragons.invalidTaskId" . to_string () , Self :: NoSuchTaskReward => "catsAndDragons.noSuchTaskReward" . to_string () , Self :: NoOfferToroAmount => "catsAndDragons.noOfferToroAmount" . to_string () , Self :: TaskIsOutOfDate => "catsAndDragons.taskIsOutOfDate" . to_string () , Self :: AuthenticationAndProfileWebIdNotEqual => "catsAndDragons.authenticationAndProfileWebIdNotEqual" . to_string () , Self :: MembershipSubscriptionPurchaseRecordDoesNotExist => "catsAndDragons.membershipSubscriptionPurchaseRecordDoesNotExist" . to_string () , Self :: WebIdNotFound => "catsAndDragons.webIdNotFound" . to_string () , Self :: InvalidJson => "catsAndDragons.invalidJson" . to_string () , Self :: NoDeviceAttached => "catsAndDragons.noDeviceAttached" . to_string () , Self :: NoSuchStrategy => "catsAndDragons.noSuchStrategy" . to_string () , Self :: InvalidProductType => "catsAndDragons.invalidProductType" . to_string () , Self :: DoubleRequest => "catsAndDragons.doubleRequest" . to_string () , Self :: AccountWithWebidHasProgress => "catsAndDragons.accountWithWebidHasProgress" . to_string () , Self :: UnsuccessfulLootboxDataUpdate => "catsAndDragons.unsuccessfulLootboxDataUpdate" . to_string () , Self :: AuthorizationFail => "catsAndDragons.authorizationFail" . to_string () , Self :: InvalidCardId => "catsAndDragons.invalidCardId" . to_string () , Self :: ProductIdEmptyOrNull => "catsAndDragons.productIdEmptyOrNull" . to_string () , Self :: MapLevelIsEmpty => "catsAndDragons.mapLevelIsEmpty" . to_string () , Self :: TransactionTypeIsNull => "catsAndDragons.transactionTypeIsNull" . to_string () , Self :: CouldNotCreditHardCurrency => "catsAndDragons.couldNotCreditHardCurrency" . to_string () , Self :: UndergoingServerMaintenance => "catsAndDragons.undergoingServerMaintenance" . to_string () , Self :: InvalidMultiplier => "catsAndDragons.invalidMultiplier" . to_string () , Self :: PurchaseRefunded => "catsAndDragons.purchaseRefunded" . to_string () , Self :: OfferIsUnavailable => "catsAndDragons.offerIsUnavailable" . to_string () , Self :: QuestRewardCloningFailed => "catsAndDragons.questRewardCloningFailed" . to_string () , Self :: CantDebitHardCurrency => "catsAndDragons.cantDebitHardCurrency" . to_string () , Self :: ReferrerIdParseError => "catsAndDragons.referrerIdParseError" . to_string () , Self :: WebRequestError => "catsAndDragons.webRequestError" . to_string () , Self :: CatIdParseError => "catsAndDragons.catIdParseError" . to_string () , Self :: CantParseDateTimeFormat => "catsAndDragons.cantParseDateTimeFormat" . to_string () , Self :: InvalidIsNull => "catsAndDragons.invalidIsNull" . to_string () , Self :: NoBingoRecipeId => "catsAndDragons.noBingoRecipeId" . to_string () , Self :: NoReferralLink => "catsAndDragons.noReferralLink" . to_string () , Self :: HardCurrencyLessOne => "catsAndDragons.hardCurrencyLessOne" . to_string () , Self :: AmountLessOne => "catsAndDragons.amountLessOne" . to_string () , Self :: ToWebIdLinked => "catsAndDragons.toWebIdLinked" . to_string () , Self :: UnknownPurchaseStatus => "catsAndDragons.unknownPurchaseStatus" . to_string () , Self :: NoTheoremReachReward => "catsAndDragons.noTheoremReachReward" . to_string () , Self :: InvalidParseSurveyToken => "catsAndDragons.invalidParseSurveyToken" . to_string () , Self :: InvalidPaymentStateForSubscriptionRenewal => "catsAndDragons.invalidPaymentStateForSubscriptionRenewal" . to_string () , Self :: ToWebIdNotExists => "catsAndDragons.toWebIdNotExists" . to_string () , Self :: ErrorWithDatabaseColumnName => "catsAndDragons.errorWithDatabaseColumnName" . to_string () , Self :: InvalidAppId => "catsAndDragons.invalidAppId" . to_string () , Self :: NickChangeCooldownIsNotExpired => "catsAndDragons.nickChangeCooldownIsNotExpired" . to_string () , Self :: NotEnoughBingoItemAmount => "catsAndDragons.notEnoughBingoItemAmount" . to_string () , Self :: ProfileIsNull => "catsAndDragons.profileIsNull" . to_string () , Self :: InvalidAppIdOrSecureKey => "catsAndDragons.invalidAppIdOrSecureKey" . to_string () , Self :: NoProductId => "catsAndDragons.noProductId" . to_string () , Self :: NoServiceNeeded => "catsAndDragons.noServiceNeeded" . to_string () , Self :: RequiredScienceNotFound => "catsAndDragons.requiredScienceNotFound" . to_string () , Self :: NoSpinType => "catsAndDragons.noSpinType" . to_string () , Self :: InvalidStatusPurchaseAppIdFormat => "catsAndDragons.invalidStatusPurchaseAppIdFormat" . to_string () , Self :: WebIdEmptyOrNull => "catsAndDragons.webIdEmptyOrNull" . to_string () , Self :: InvalidPurchaseParam => "catsAndDragons.invalidPurchaseParam" . to_string () , Self :: UnavailableOfferRecordUnsuccessful => "catsAndDragons.unavailableOfferRecordUnsuccessful" . to_string () , Self :: InvalidEventId => "catsAndDragons.invalidEventId" . to_string () , Self :: UnlinkingTheDeviceMoreThanOnceAWeek => "catsAndDragons.unlinkingTheDeviceMoreThanOnceAWeek" . to_string () , Self :: CrossreferralNotAllowed => "catsAndDragons.crossreferralNotAllowed" . to_string () , Self :: NicknameIsTooShort => "catsAndDragons.nicknameIsTooShort" . to_string () , Self :: NoStatusPurchaseAppId => "catsAndDragons.noStatusPurchaseAppId" . to_string () , Self :: ConfigWasNotFound => "catsAndDragons.configWasNotFound" . to_string () , Self :: InvalidSecureKey => "catsAndDragons.invalidSecureKey" . to_string () , Self :: SaveDataNotFound => "catsAndDragons.saveDataNotFound" . to_string () , Self :: InvalidMembership => "catsAndDragons.invalidMembership" . to_string () , Self :: CapitalizationChecksumTestFailedOrInvalidEthereumWallet => "catsAndDragons.capitalizationChecksumTestFailedOrInvalidEthereumWallet" . to_string () , Self :: InvalidTheoremReachReward => "catsAndDragons.invalidTheoremReachReward" . to_string () , Self :: SubscriptionPaymentPending => "catsAndDragons.subscriptionPaymentPending" . to_string () , Self :: HardCurrencyNullOrEmpty => "catsAndDragons.hardCurrencyNullOrEmpty" . to_string () , Self :: InvalidRecipeId => "catsAndDragons.invalidRecipeId" . to_string () , Self :: PurchaseValidationUnsuccessful => "catsAndDragons.purchaseValidationUnsuccessful" . to_string () , Self :: NoOfferKey => "catsAndDragons.noOfferKey" . to_string () , Self :: InvalidSurveyToken => "catsAndDragons.invalidSurveyToken" . to_string () , Self :: InvalidScore => "catsAndDragons.invalidScore" . to_string () , Self :: PurchasePending => "catsAndDragons.purchasePending" . to_string () , Self :: PurchaseReceiptEmptyOrNull => "catsAndDragons.purchaseReceiptEmptyOrNull" . to_string () , Self :: NotEnoughMoneyOnBalance => "catsAndDragons.notEnoughMoneyOnBalance" . to_string () , Self :: NoJsonData => "catsAndDragons.noJsonData" . to_string () , Self :: NoNick => "catsAndDragons.noNick" . to_string () , Self :: ReferrerCodeParseError => "catsAndDragons.referrerCodeParseError" . to_string () , Self :: CantUpdateTransaction => "catsAndDragons.cantUpdateTransaction" . to_string () , Self :: InvalidOfferKey => "catsAndDragons.invalidOfferKey" . to_string () , Self :: ScoreCannotBeLessThanZero => "catsAndDragons.scoreCannotBeLessThanZero" . to_string () , Self :: InvalidBalance => "catsAndDragons.invalidBalance" . to_string () , Self :: PriceParseError => "catsAndDragons.priceParseError" . to_string () , Self :: InvalidHardCurrencyTransactionType => "catsAndDragons.invalidHardCurrencyTransactionType" . to_string () , Self :: NoCatId => "catsAndDragons.noCatId" . to_string () , Self :: NoMembership => "catsAndDragons.noMembership" . to_string () , Self :: MissingParameter => "catsAndDragons.missingParameter" . to_string () , Self :: NoTask => "catsAndDragons.noTask" . to_string () , Self :: ReferralTaskRewardAlreadyTaken => "catsAndDragons.referralTaskRewardAlreadyTaken" . to_string () , Self :: NoHandlerInApp => "catsAndDragons.noHandlerInApp" . to_string () , Self :: InvitedUserDoesNotExists => "catsAndDragons.invitedUserDoesNotExists" . to_string () , Self :: UndergoingServerUpdate => "catsAndDragons.undergoingServerUpdate" . to_string () , Self :: InvalidNick => "catsAndDragons.invalidNick" . to_string () , Self :: NoIp => "catsAndDragons.noIp" . to_string () , Self :: AchievementCompleted => "catsAndDragons.achievementCompleted" . to_string () , Self :: NoDeviceId => "catsAndDragons.noDeviceId" . to_string () , Self :: InvalidOid => "catsAndDragons.invalidOid" . to_string () , Self :: SurveyIsAlreadyRecorded => "catsAndDragons.surveyIsAlreadyRecorded" . to_string () , Self :: InvalidWebId => "catsAndDragons.invalidWebId" . to_string () , Self :: EmailAlreadyInUse => "catsAndDragons.emailAlreadyInUse" . to_string () , Self :: RewardsIsNull => "catsAndDragons.rewardsIsNull" . to_string () , Self :: DeviceIdEmptyOrNull => "catsAndDragons.deviceIdEmptyOrNull" . to_string () , Self :: UserInBlackList => "catsAndDragons.userInBlackList" . to_string () , Self :: PurchaseCanceled => "catsAndDragons.purchaseCanceled" . to_string () , Self :: AccountIsAlreadyTied => "catsAndDragons.accountIsAlreadyTied" . to_string () , Self :: WebIdAlreadyDefaultOrNotExists => "catsAndDragons.webIdAlreadyDefaultOrNotExists" . to_string () , Self :: NoEndDate => "catsAndDragons.noEndDate" . to_string () , Self :: EndDateIsLessThanStartDate => "catsAndDragons.endDateIsLessThanStartDate" . to_string () , Self :: OneRequestKeyWithMultipleValues => "catsAndDragons.oneRequestKeyWithMultipleValues" . to_string () , Self :: BingoRecipeNotCrafted => "catsAndDragons.bingoRecipeNotCrafted" . to_string () , Self :: InvalidCurrencyType => "catsAndDragons.invalidCurrencyType" . to_string () , Self :: InvalidPurchaseKey => "catsAndDragons.invalidPurchaseKey" . to_string () , Self :: MembershipSubscriptionPurchaseIsNotAvailable => "catsAndDragons.membershipSubscriptionPurchaseIsNotAvailable" . to_string () , Self :: PurchaseRewardUnsuccessful => "catsAndDragons.purchaseRewardUnsuccessful" . to_string () , Self :: SubscriptionRenewalNumberIsSame => "catsAndDragons.subscriptionRenewalNumberIsSame" . to_string () , Self :: CardMaxLevelNotFound => "catsAndDragons.cardMaxLevelNotFound" . to_string () , Self :: NoPrice => "catsAndDragons.noPrice" . to_string () , Self :: PurchaseKeyEmptyOrNull => "catsAndDragons.purchaseKeyEmptyOrNull" . to_string () , Self :: NoInappPurchaseData => "catsAndDragons.noInappPurchaseData" . to_string () , Self :: InvalidAppMetricaDeviceId => "catsAndDragons.invalidAppMetricaDeviceId" . to_string () , Self :: InvalidProductId => "catsAndDragons.invalidProductId" . to_string () , Self :: NoHardCurrency => "catsAndDragons.noHardCurrency" . to_string () , Self :: InvalidPurchase => "catsAndDragons.invalidPurchase" . to_string () , Self :: JsonEmptyOrNull => "catsAndDragons.jsonEmptyOrNull" . to_string () , Self :: MapLevelTooLow => "catsAndDragons.mapLevelTooLow" . to_string () , Self :: NoPurchaseTokenData => "catsAndDragons.noPurchaseTokenData" . to_string () , Self :: UserHasNotCompletedRequiredAmountOfAchievements => "catsAndDragons.userHasNotCompletedRequiredAmountOfAchievements" . to_string () , Self :: NoPurchaseToken => "catsAndDragons.noPurchaseToken" . to_string () , Self :: UserIsNotAllowedToCompleteTask => "catsAndDragons.userIsNotAllowedToCompleteTask" . to_string () , Self :: TaskListEmpty => "catsAndDragons.taskListEmpty" . to_string () , Self :: InvitedUserAlreadyHaveCompletedAchievements => "catsAndDragons.invitedUserAlreadyHaveCompletedAchievements" . to_string () , Self :: UserWhoInvitesAndInvitedUserAreSame => "catsAndDragons.userWhoInvitesAndInvitedUserAreSame" . to_string () , Self :: NoPurchaseKey => "catsAndDragons.noPurchaseKey" . to_string () , Self :: NotEnoughScience => "catsAndDragons.notEnoughScience" . to_string () , Self :: OfferKeyEmptyOrNull => "catsAndDragons.offerKeyEmptyOrNull" . to_string () , Self :: NoConfigKey => "catsAndDragons.noConfigKey" . to_string () , Self :: ScoreCannotBeMoreThanLimit => "catsAndDragons.scoreCannotBeMoreThanLimit" . to_string () , Self :: CantUpdateAppmetricaDeviceId => "catsAndDragons.cantUpdateAppmetricaDeviceId" . to_string () , Self :: TransactionIdParseError => "catsAndDragons.transactionIdParseError" . to_string () , Self :: NoCardId => "catsAndDragons.noCardId" . to_string () , Self :: InvalidToken => "catsAndDragons.invalidToken" . to_string () , Self :: InvalidMultiplierFormat => "catsAndDragons.invalidMultiplierFormat" . to_string () , Self :: UserIsNotConnected => "catsAndDragons.userIsNotConnected" . to_string () , Self :: InvalidValidation => "catsAndDragons.invalidValidation" . to_string () , Self :: NoSuchSkillKey => "catsAndDragons.noSuchSkillKey" . to_string () , Self :: NickAlreadyExists => "catsAndDragons.nickAlreadyExists" . to_string () , Self :: NoStartDate => "catsAndDragons.noStartDate" . to_string () , Self :: InvalidResponseCode => "catsAndDragons.invalidResponseCode" . to_string () , Self :: NoJson => "catsAndDragons.noJson" . to_string () , Self :: InvalidSpinType => "catsAndDragons.invalidSpinType" . to_string () , Self :: InvalidStoreType => "catsAndDragons.invalidStoreType" . to_string () , Self :: NoAppMetricaDeviceId => "catsAndDragons.noAppMetricaDeviceId" . to_string () , Self :: NoOid => "catsAndDragons.noOid" . to_string () , Self :: InvalidConfigKey => "catsAndDragons.invalidConfigKey" . to_string () , Self :: MembershipNotExists => "catsAndDragons.membershipNotExists" . to_string () , Self :: InvalidHardCurrencyFormat => "catsAndDragons.invalidHardCurrencyFormat" . to_string () , Self :: TransactionIdNullOrEmpty => "catsAndDragons.transactionIdNullOrEmpty" . to_string () , Self :: ScoreEmptyOrNull => "catsAndDragons.scoreEmptyOrNull" . to_string () , Self :: NotEnoughCardExperience => "catsAndDragons.notEnoughCardExperience" . to_string () , Self :: InvalidStatusPurchaseAppId => "catsAndDragons.invalidStatusPurchaseAppId" . to_string () , Self :: UserNotExist => "catsAndDragons.userNotExist" . to_string () , Self :: UnknownLootboxRewardType => "catsAndDragons.unknownLootboxRewardType" . to_string () , Self :: NoStoreType => "catsAndDragons.noStoreType" . to_string () , Self :: NoWebId => "catsAndDragons.noWebId" . to_string () , Self :: NoPurchaseParam => "catsAndDragons.noPurchaseParam" . to_string () , Self :: LootboxIdParseError => "catsAndDragons.lootboxIdParseError" . to_string () , Self :: NoMultiplier => "catsAndDragons.noMultiplier" . to_string () , Self :: CardInfoNotFound => "catsAndDragons.cardInfoNotFound" . to_string () , Self :: NoTransactionId => "catsAndDragons.noTransactionId" . to_string () , Self :: NoToken => "catsAndDragons.noToken" . to_string () , Self :: NoReferralCode => "catsAndDragons.noReferralCode" . to_string () , Self :: CatPurchaseParseError => "catsAndDragons.catPurchaseParseError" . to_string () , Self :: NoSurveyUserId => "catsAndDragons.noSurveyUserId" . to_string () , Self :: OfferKeyNotExists => "catsAndDragons.offerKeyNotExists" . to_string () , Self :: NoSuchAchievement => "catsAndDragons.noSuchAchievement" . to_string () , Self :: NoLootboxId => "catsAndDragons.noLootboxId" . to_string () , Self :: InvalidLootboxId => "catsAndDragons.invalidLootboxId" . to_string () , Self :: WebDataNotFound => "catsAndDragons.webDataNotFound" . to_string () , Self :: NoTheoremReachTransactionId => "catsAndDragons.noTheoremReachTransactionId" . to_string () , Self :: AppKeyNotExist => "catsAndDragons.appKeyNotExist" . to_string () , Self :: NoPurchaseReceipt => "catsAndDragons.noPurchaseReceipt" . to_string () , Self :: EmailNotVerified => "catsAndDragons.emailNotVerified" . to_string () , Self :: CardUpgradeInfoNotFound => "catsAndDragons.cardUpgradeInfoNotFound" . to_string () , Self :: CardAlreadyAtMaxLevel => "catsAndDragons.cardAlreadyAtMaxLevel" . to_string () , Self :: NoLevel => "catsAndDragons.noLevel" . to_string () , Self :: UsersLootboxAmountIsNotEnough => "catsAndDragons.usersLootboxAmountIsNotEnough" . to_string () , Self :: SubscriptionIsInTrialPeriod => "catsAndDragons.subscriptionIsInTrialPeriod" . to_string () , Self :: InvitedUserWasInvitedBefore => "catsAndDragons.invitedUserWasInvitedBefore" . to_string () , Self :: InvalidConfigJson => "catsAndDragons.invalidConfigJson" . to_string () , Self :: PasswordEmptyOrNull => "catsAndDragons.passwordEmptyOrNull" . to_string () , Self :: DeviceIsOccupied => "catsAndDragons.deviceIsOccupied" . to_string () , Self :: AlreadyAuthorized => "catsAndDragons.alreadyAuthorized" . to_string () , Self :: BingoSeasonIsNoActive => "catsAndDragons.bingoSeasonIsNoActive" . to_string () , Self :: NoAchievements => "catsAndDragons.noAchievements" . to_string () , Self :: OrderIdParseError => "catsAndDragons.orderIdParseError" . to_string () , Self :: NoAdSpinsAvailable => "catsAndDragons.noAdSpinsAvailable" . to_string () , Self :: NotAllowed => "catsAndDragons.notAllowed" . to_string () , Self :: NotEnoughTokensOnBalance => "catsAndDragons.notEnoughTokensOnBalance" . to_string () , Self :: TheoremReachTransactionIdEmptyOrNull => "catsAndDragons.theoremReachTransactionIdEmptyOrNull" . to_string () , Self :: ThisDeviceIdIsOccupied => "catsAndDragons.thisDeviceIdIsOccupied" . to_string () , Self :: UserMembershipIsHigher => "catsAndDragons.userMembershipIsHigher" . to_string () , Self :: UserWhoInvitesDoesNotExists => "catsAndDragons.userWhoInvitesDoesNotExists" . to_string () , Self :: InvalidScienceName => "catsAndDragons.invalidScienceName" . to_string () , Self :: CantFindHardCurrencyTransactionType => "catsAndDragons.cantFindHardCurrencyTransactionType" . to_string () , Self :: InvalidClientVersion => "catsAndDragons.invalidClientVersion" . to_string () , Self :: UsersLootboxNotFound => "catsAndDragons.usersLootboxNotFound" . to_string () , Self :: ExchangeWebRequestError => "catsAndDragons.exchangeWebRequestError" . to_string () , Self :: Disconnect => "catsAndDragons.disconnect" . to_string () , Self :: InvalidCurrencyPurchaseKey => "catsAndDragons.invalidCurrencyPurchaseKey" . to_string () , Self :: NoSaveData => "catsAndDragons.noSaveData" . to_string () , Self :: NoConfigJson => "catsAndDragons.noConfigJson" . to_string () , Self :: LootboxIsOnCooldown => "catsAndDragons.lootboxIsOnCooldown" . to_string () , Self :: InvalidIp => "catsAndDragons.invalidIp" . to_string () , Self :: InvalidSkillKey => "catsAndDragons.invalidSkillKey" . to_string () , Self :: ErrorWithNameOfDatabaseRelation => "catsAndDragons.errorWithNameOfDatabaseRelation" . to_string () , Self :: PurchaseInitialized => "catsAndDragons.purchaseInitialized" . to_string () , Self :: InvalidMailOrPassword => "catsAndDragons.invalidMailOrPassword" . to_string () , Self :: NoReferrerCode => "catsAndDragons.noReferrerCode" . to_string () , Self :: InvalidPurchaseReceiptOrStoreId => "catsAndDragons.invalidPurchaseReceiptOrStoreId" . to_string () , Self :: IpEmptyOrNull => "catsAndDragons.ipEmptyOrNull" . to_string () , Self :: ReferrerSetUnsuccessful => "catsAndDragons.referrerSetUnsuccessful" . to_string () , Self :: NicknameIsTooLong => "catsAndDragons.nicknameIsTooLong" . to_string () , Self :: TaskCompleted => "catsAndDragons.taskCompleted" . to_string () , Self :: InvalidTheoremReachTransactionId => "catsAndDragons.invalidTheoremReachTransactionId" . to_string () , Self :: NoSecureKey => "catsAndDragons.noSecureKey" . to_string () , Self :: InvalidAmountFormat => "catsAndDragons.invalidAmountFormat" . to_string () , Self :: InvalidPurchaseType => "catsAndDragons.invalidPurchaseType" . to_string () , Self :: ChestLevelIsUnavailable => "catsAndDragons.chestLevelIsUnavailable" . to_string () , Self :: PurchaseRecordUnsuccessful => "catsAndDragons.purchaseRecordUnsuccessful" . to_string () , Self :: InvalidMembershipTypeForPurchase => "catsAndDragons.invalidMembershipTypeForPurchase" . to_string () , Self :: NoProductType => "catsAndDragons.noProductType" . to_string () , Self :: NicknameEmptyOrNull => "catsAndDragons.nicknameEmptyOrNull" . to_string () , Self :: NoDepositAmount => "catsAndDragons.noDepositAmount" . to_string () , Self :: ServerTemporarilyUnavailable => "catsAndDragons.serverTemporarilyUnavailable" . to_string () , Self :: NoCompletedTasks => "catsAndDragons.noCompletedTasks" . to_string () , Self :: CantFindStorePurchase => "catsAndDragons.cantFindStorePurchase" . to_string () , Self :: ThisDeviceIdNotExists => "catsAndDragons.thisDeviceIdNotExists" . to_string () , Self :: InvalidReferrerId => "catsAndDragons.invalidReferrerId" . to_string () , Self :: UsersCardNotFound => "catsAndDragons.usersCardNotFound" . to_string () , Self :: SuccessWithoutCredit => "catsAndDragons.successWithoutCredit" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Roles { # [serde (rename = "roles.alreadyHasRole")] AlreadyHasRole , } impl ToString for Roles { fn to_string (& self) -> String { match self { Self :: AlreadyHasRole => "roles.alreadyHasRole" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum GooglePlay { # [serde (rename = "googlePlay.invalidSubscription")] InvalidSubscription , # [serde (rename = "googlePlay.invalidPurchaseStatus")] InvalidPurchaseStatus , } impl ToString for GooglePlay { fn to_string (& self) -> String { match self { Self :: InvalidSubscription => "googlePlay.invalidSubscription" . to_string () , Self :: InvalidPurchaseStatus => "googlePlay.invalidPurchaseStatus" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Fs { # [serde (rename = "fs.readFile")] ReadFile , } impl ToString for Fs { fn to_string (& self) -> String { match self { Self :: ReadFile => "fs.readFile" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Auth { # [serde (rename = "auth.alreadySent")] AlreadySent , # [serde (rename = "auth.internalError")] InternalError , # [serde (rename = "auth.passwordMinLength")] PasswordMinLength , # [serde (rename = "auth.notEnoughPermissions")] NotEnoughPermissions , # [serde (rename = "auth.deleteUser")] DeleteUser , # [serde (rename = "auth.expiredLink")] ExpiredLink , # [serde (rename = "auth.userDoesntExists")] UserDoesntExists , # [serde (rename = "auth.userAlreadyExists")] UserAlreadyExists , # [serde (rename = "auth.invalidToken")] InvalidToken , # [serde (rename = "auth.invalidCredentials")] InvalidCredentials , # [serde (rename = "auth.invalidRefreshToken")] InvalidRefreshToken , # [serde (rename = "auth.sessionsError")] SessionsError , # [serde (rename = "auth.invalidConfirmationCode")] InvalidConfirmationCode , # [serde (rename = "auth.unconfirmedEmail")] UnconfirmedEmail , # [serde (rename = "auth.unauthorized")] Unauthorized , # [serde (rename = "auth.userAttemptsExhausted")] UserAttemptsExhausted , # [serde (rename = "auth.wrongToken")] WrongToken , # [serde (rename = "auth.accessDenied")] AccessDenied , # [serde (rename = "auth.alreadyBanned")] AlreadyBanned , } impl ToString for Auth { fn to_string (& self) -> String { match self { Self :: AlreadySent => "auth.alreadySent" . to_string () , Self :: InternalError => "auth.internalError" . to_string () , Self :: PasswordMinLength => "auth.passwordMinLength" . to_string () , Self :: NotEnoughPermissions => "auth.notEnoughPermissions" . to_string () , Self :: DeleteUser => "auth.deleteUser" . to_string () , Self :: ExpiredLink => "auth.expiredLink" . to_string () , Self :: UserDoesntExists => "auth.userDoesntExists" . to_string () , Self :: UserAlreadyExists => "auth.userAlreadyExists" . to_string () , Self :: InvalidToken => "auth.invalidToken" . to_string () , Self :: InvalidCredentials => "auth.invalidCredentials" . to_string () , Self :: InvalidRefreshToken => "auth.invalidRefreshToken" . to_string () , Self :: SessionsError => "auth.sessionsError" . to_string () , Self :: InvalidConfirmationCode => "auth.invalidConfirmationCode" . to_string () , Self :: UnconfirmedEmail => "auth.unconfirmedEmail" . to_string () , Self :: Unauthorized => "auth.unauthorized" . to_string () , Self :: UserAttemptsExhausted => "auth.userAttemptsExhausted" . to_string () , Self :: WrongToken => "auth.wrongToken" . to_string () , Self :: AccessDenied => "auth.accessDenied" . to_string () , Self :: AlreadyBanned => "auth.alreadyBanned" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum ProductRegistry { # [serde (rename = "productRegistry.internalError")] InternalError , } impl ToString for ProductRegistry { fn to_string (& self) -> String { match self { Self :: InternalError => "productRegistry.internalError" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Db { # [serde (rename = "db.invalidTransaction")] InvalidTransaction , # [serde (rename = "db.update")] Update , # [serde (rename = "db.remove")] Remove , # [serde (rename = "db.insert")] Insert , # [serde (rename = "db.notFound")] NotFound , # [serde (rename = "db.save")] Save , # [serde (rename = "db.select")] Select , # [serde (rename = "db.create")] Create , } impl ToString for Db { fn to_string (& self) -> String { match self { Self :: InvalidTransaction => "db.invalidTransaction" . to_string () , Self :: Update => "db.update" . to_string () , Self :: Remove => "db.remove" . to_string () , Self :: Insert => "db.insert" . to_string () , Self :: NotFound => "db.notFound" . to_string () , Self :: Save => "db.save" . to_string () , Self :: Select => "db.select" . to_string () , Self :: Create => "db.create" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum AdminOptions { # [serde (rename = "adminOptions.add")] Add , # [serde (rename = "adminOptions.update")] Update , } impl ToString for AdminOptions { fn to_string (& self) -> String { match self { Self :: Add => "adminOptions.add" . to_string () , Self :: Update => "adminOptions.update" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Referrals { # [serde (rename = "referrals.alreadyHasReferrer")] AlreadyHasReferrer , # [serde (rename = "referrals.unavailableTransaction")] UnavailableTransaction , # [serde (rename = "referrals.alreadyHasCode")] AlreadyHasCode , } impl ToString for Referrals { fn to_string (& self) -> String { match self { Self :: AlreadyHasReferrer => "referrals.alreadyHasReferrer" . to_string () , Self :: UnavailableTransaction => "referrals.unavailableTransaction" . to_string () , Self :: AlreadyHasCode => "referrals.alreadyHasCode" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Profile { # [serde (rename = "profile.alreadyBanned")] AlreadyBanned , # [serde (rename = "profile.alreadySubscribed")] AlreadySubscribed , # [serde (rename = "profile.notBanned")] NotBanned , } impl ToString for Profile { fn to_string (& self) -> String { match self { Self :: AlreadyBanned => "profile.alreadyBanned" . to_string () , Self :: AlreadySubscribed => "profile.alreadySubscribed" . to_string () , Self :: NotBanned => "profile.notBanned" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Functions { # [serde (rename = "functions.emptyParams")] EmptyParams , # [serde (rename = "functions.moreThanOneParam")] MoreThanOneParam , } impl ToString for Functions { fn to_string (& self) -> String { match self { Self :: EmptyParams => "functions.emptyParams" . to_string () , Self :: MoreThanOneParam => "functions.moreThanOneParam" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Permissions { # [serde (rename = "permissions.notAllowed")] NotAllowed , } impl ToString for Permissions { fn to_string (& self) -> String { match self { Self :: NotAllowed => "permissions.notAllowed" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Cron { # [serde (rename = "cron.delete")] Delete , # [serde (rename = "cron.create")] Create , } impl ToString for Cron { fn to_string (& self) -> String { match self { Self :: Delete => "cron.delete" . to_string () , Self :: Create => "cron.create" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Http { # [serde (rename = "http.401")] E401 , # [serde (rename = "http.400")] E400 , # [serde (rename = "http.403")] E403 , # [serde (rename = "http.404")] E404 , # [serde (rename = "http.500")] E500 , } impl ToString for Http { fn to_string (& self) -> String { match self { Self :: E401 => "http.401" . to_string () , Self :: E400 => "http.400" . to_string () , Self :: E403 => "http.403" . to_string () , Self :: E404 => "http.404" . to_string () , Self :: E500 => "http.500" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum BytesFormatter { # [serde (rename = "bytesFormatter.handshakeAuthToken")] HandshakeAuthToken , # [serde (rename = "bytesFormatter.internalError")] InternalError , # [serde (rename = "bytesFormatter.handshakeInvalidVersion")] HandshakeInvalidVersion , # [serde (rename = "bytesFormatter.handshakeSessionToken")] HandshakeSessionToken , } impl ToString for BytesFormatter { fn to_string (& self) -> String { match self { Self :: HandshakeAuthToken => "bytesFormatter.handshakeAuthToken" . to_string () , Self :: InternalError => "bytesFormatter.internalError" . to_string () , Self :: HandshakeInvalidVersion => "bytesFormatter.handshakeInvalidVersion" . to_string () , Self :: HandshakeSessionToken => "bytesFormatter.handshakeSessionToken" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum TwoFactorAuth { # [serde (rename = "twoFactorAuth.hasEntry")] HasEntry , # [serde (rename = "twoFactorAuth.generate")] Generate , # [serde (rename = "twoFactorAuth.invalidToken")] InvalidToken , # [serde (rename = "twoFactorAuth.expiredToken")] ExpiredToken , } impl ToString for TwoFactorAuth { fn to_string (& self) -> String { match self { Self :: HasEntry => "twoFactorAuth.hasEntry" . to_string () , Self :: Generate => "twoFactorAuth.generate" . to_string () , Self :: InvalidToken => "twoFactorAuth.invalidToken" . to_string () , Self :: ExpiredToken => "twoFactorAuth.expiredToken" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Bytes { # [serde (rename = "bytes.read")] Read , # [serde (rename = "bytes.write")] Write , } impl ToString for Bytes { fn to_string (& self) -> String { match self { Self :: Read => "bytes.read" . to_string () , Self :: Write => "bytes.write" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Nats { # [serde (rename = "nats.internalServiceCall")] InternalServiceCall , # [serde (rename = "nats.send")] Send , # [serde (rename = "nats.receive")] Receive , } impl ToString for Nats { fn to_string (& self) -> String { match self { Self :: InternalServiceCall => "nats.internalServiceCall" . to_string () , Self :: Send => "nats.send" . to_string () , Self :: Receive => "nats.receive" . to_string () , } } } # [derive (Debug , Clone , Deserialize , Serialize , PartialEq)] pub enum Blockchain { # [serde (rename = "blockchain.notEnoughBalance")] NotEnoughBalance , } impl ToString for Blockchain { fn to_string (& self) -> String { match self { Self :: NotEnoughBalance => "blockchain.notEnoughBalance" . to_string () , } } }